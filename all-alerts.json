{
  "code_scanning": [
    {
      "number": 122,
      "created_at": "2025-06-18T10:12:11Z",
      "updated_at": "2025-06-18T10:19:48Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/122",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/122",
      "state": "fixed",
      "fixed_at": "2025-06-18T10:19:48Z",
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak",
        "severity": "warning",
        "description": "Semgrep Finding: generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak",
        "name": "generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak",
        "tags": [
          "CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory",
          "MEDIUM CONFIDENCE",
          "OWASP-A3:2017 Sensitive Data Exposure",
          "security"
        ],
        "full_description": "Detects potential Google Maps API keys in code",
        "help": "Detects potential Google Maps API keys in code\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak)\n - [https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e](https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e)\n",
        "help_uri": "https://semgrep.dev/r/generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "fixed",
        "commit_sha": "a4027a84342c902a902cf37d9c2984e62b51b7d6",
        "message": {
          "text": "Detects potential Google Maps API keys in code"
        },
        "location": {
          "path": "REFERENCES.md",
          "start_line": 15,
          "end_line": 15,
          "start_column": 1,
          "end_column": 40
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/122/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 121,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/121",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/121",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key",
        "name": "javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key",
        "tags": [
          "CWE-798: Use of Hard-coded Credentials",
          "LOW CONFIDENCE",
          "OWASP-A07:2021 - Identification and Authentication Failures",
          "security"
        ],
        "full_description": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.",
        "help": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key)\n - [https://rules.sonarsource.com/javascript/RSPEC-2068](https://rules.sonarsource.com/javascript/RSPEC-2068)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management)\n",
        "help_uri": "https://semgrep.dev/r/javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 152,
          "end_line": 152,
          "start_column": 16,
          "end_column": 55
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/121/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 120,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/120",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/120",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key",
        "name": "javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key",
        "tags": [
          "CWE-798: Use of Hard-coded Credentials",
          "LOW CONFIDENCE",
          "OWASP-A07:2021 - Identification and Authentication Failures",
          "security"
        ],
        "full_description": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.",
        "help": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key)\n - [https://rules.sonarsource.com/javascript/RSPEC-2068](https://rules.sonarsource.com/javascript/RSPEC-2068)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management)\n",
        "help_uri": "https://semgrep.dev/r/javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 44,
          "end_line": 44,
          "start_column": 39,
          "end_column": 94
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/120/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 119,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/119",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/119",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage",
        "name": "javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage",
        "tags": [
          "CWE-1104: Use of Unmaintained Third Party Components",
          "LOW CONFIDENCE",
          "OWASP-A06:2021 - Vulnerable and Outdated Components",
          "security"
        ],
        "full_description": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.",
        "help": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage)\n - [https://github.com/mmckegg/notevil](https://github.com/mmckegg/notevil)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function."
        },
        "location": {
          "path": "routes/b2bOrder.ts",
          "start_line": 23,
          "end_line": 23,
          "start_column": 9,
          "end_column": 80
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/119/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 118,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/118",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/118",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "tags": [
          "CWE-548: Exposure of Information Through Directory Listing",
          "MEDIUM CONFIDENCE",
          "OWASP-A01:2021 - Broken Access Control",
          "OWASP-A06:2017 - Security Misconfiguration",
          "security"
        ],
        "full_description": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "help": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing)\n - [https://www.npmjs.com/package/serve-index](https://www.npmjs.com/package/serve-index)\n - [https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/](https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."
        },
        "location": {
          "path": "server.ts",
          "start_line": 280,
          "end_line": 280,
          "start_column": 3,
          "end_column": 103
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/118/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 117,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/117",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/117",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "tags": [
          "CWE-548: Exposure of Information Through Directory Listing",
          "MEDIUM CONFIDENCE",
          "OWASP-A01:2021 - Broken Access Control",
          "OWASP-A06:2017 - Security Misconfiguration",
          "security"
        ],
        "full_description": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "help": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing)\n - [https://www.npmjs.com/package/serve-index](https://www.npmjs.com/package/serve-index)\n - [https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/](https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."
        },
        "location": {
          "path": "server.ts",
          "start_line": 276,
          "end_line": 276,
          "start_column": 3,
          "end_column": 115
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/117/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 116,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/116",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/116",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "tags": [
          "CWE-548: Exposure of Information Through Directory Listing",
          "MEDIUM CONFIDENCE",
          "OWASP-A01:2021 - Broken Access Control",
          "OWASP-A06:2017 - Security Misconfiguration",
          "security"
        ],
        "full_description": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "help": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing)\n - [https://www.npmjs.com/package/serve-index](https://www.npmjs.com/package/serve-index)\n - [https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/](https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."
        },
        "location": {
          "path": "server.ts",
          "start_line": 272,
          "end_line": 272,
          "start_column": 3,
          "end_column": 109
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/116/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 115,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/115",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/115",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "tags": [
          "CWE-548: Exposure of Information Through Directory Listing",
          "MEDIUM CONFIDENCE",
          "OWASP-A01:2021 - Broken Access Control",
          "OWASP-A06:2017 - Security Misconfiguration",
          "security"
        ],
        "full_description": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "help": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing)\n - [https://www.npmjs.com/package/serve-index](https://www.npmjs.com/package/serve-index)\n - [https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/](https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."
        },
        "location": {
          "path": "server.ts",
          "start_line": 268,
          "end_line": 268,
          "start_column": 3,
          "end_column": 76
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/115/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 114,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/114",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/114",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
        "severity": "note",
        "description": "Semgrep Finding: javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
        "name": "javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
        "tags": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          "LOW CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
          "security"
        ],
        "full_description": "Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
        "help": "Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization)\n - [https://www.npmjs.com/package/dompurify](https://www.npmjs.com/package/dompurify)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`."
        },
        "location": {
          "path": "data/static/codefixes/restfulXssChallenge_2.ts",
          "start_line": 59,
          "end_line": 59,
          "start_column": 34,
          "end_column": 106
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/114/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 113,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/113",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/113",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
        "severity": "note",
        "description": "Semgrep Finding: javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
        "name": "javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
        "tags": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          "LOW CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
          "security"
        ],
        "full_description": "Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
        "help": "Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization)\n - [https://www.npmjs.com/package/dompurify](https://www.npmjs.com/package/dompurify)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`."
        },
        "location": {
          "path": "data/static/codefixes/restfulXssChallenge_2.ts",
          "start_line": 59,
          "end_line": 59,
          "start_column": 34,
          "end_column": 82
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/113/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 112,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/112",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/112",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "severity": "error",
        "description": "Semgrep Finding: javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "tags": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
          "HIGH CONFIDENCE",
          "OWASP-A01:2017 - Injection",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "help": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection)\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n",
        "help_uri": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
        },
        "location": {
          "path": "routes/search.ts",
          "start_line": 23,
          "end_line": 23,
          "start_column": 28,
          "end_column": 159
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/112/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 111,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/111",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/111",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "severity": "error",
        "description": "Semgrep Finding: javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "tags": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
          "HIGH CONFIDENCE",
          "OWASP-A01:2017 - Injection",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "help": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection)\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n",
        "help_uri": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
        },
        "location": {
          "path": "routes/login.ts",
          "start_line": 34,
          "end_line": 34,
          "start_column": 28,
          "end_column": 169
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/111/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 110,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/110",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/110",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "severity": "error",
        "description": "Semgrep Finding: javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "tags": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
          "HIGH CONFIDENCE",
          "OWASP-A01:2017 - Injection",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "help": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection)\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n",
        "help_uri": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
        },
        "location": {
          "path": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
          "start_line": 10,
          "end_line": 10,
          "start_column": 28,
          "end_column": 159
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/110/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 109,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/109",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/109",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "severity": "error",
        "description": "Semgrep Finding: javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "tags": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
          "HIGH CONFIDENCE",
          "OWASP-A01:2017 - Injection",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "help": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection)\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n",
        "help_uri": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
        },
        "location": {
          "path": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
          "start_line": 6,
          "end_line": 6,
          "start_column": 28,
          "end_column": 159
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/109/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 108,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/108",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/108",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "severity": "error",
        "description": "Semgrep Finding: javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "tags": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
          "HIGH CONFIDENCE",
          "OWASP-A01:2017 - Injection",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "help": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection)\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n",
        "help_uri": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
        },
        "location": {
          "path": "data/static/codefixes/dbSchemaChallenge_3.ts",
          "start_line": 11,
          "end_line": 11,
          "start_column": 28,
          "end_column": 159
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/108/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 107,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/107",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/107",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "severity": "error",
        "description": "Semgrep Finding: javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "tags": [
          "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
          "HIGH CONFIDENCE",
          "OWASP-A01:2017 - Injection",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "help": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection)\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n",
        "help_uri": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
        },
        "location": {
          "path": "data/static/codefixes/dbSchemaChallenge_1.ts",
          "start_line": 5,
          "end_line": 5,
          "start_column": 28,
          "end_column": 162
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/107/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 106,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/106",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/106",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "tags": [
          "CWE-73: External Control of File Name or Path",
          "MEDIUM CONFIDENCE",
          "OWASP-A04:2021 - Insecure Design",
          "security"
        ],
        "full_description": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "help": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."
        },
        "location": {
          "path": "routes/quarantineServer.ts",
          "start_line": 14,
          "end_line": 14,
          "start_column": 20,
          "end_column": 57
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/106/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 105,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/105",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/105",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "tags": [
          "CWE-73: External Control of File Name or Path",
          "MEDIUM CONFIDENCE",
          "OWASP-A04:2021 - Insecure Design",
          "security"
        ],
        "full_description": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "help": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."
        },
        "location": {
          "path": "routes/logfileServer.ts",
          "start_line": 14,
          "end_line": 14,
          "start_column": 20,
          "end_column": 47
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/105/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 104,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/104",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/104",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "tags": [
          "CWE-73: External Control of File Name or Path",
          "MEDIUM CONFIDENCE",
          "OWASP-A04:2021 - Insecure Design",
          "security"
        ],
        "full_description": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "help": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."
        },
        "location": {
          "path": "routes/keyServer.ts",
          "start_line": 14,
          "end_line": 14,
          "start_column": 20,
          "end_column": 57
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/104/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 103,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/103",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/103",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "tags": [
          "CWE-73: External Control of File Name or Path",
          "MEDIUM CONFIDENCE",
          "OWASP-A04:2021 - Insecure Design",
          "security"
        ],
        "full_description": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "help": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."
        },
        "location": {
          "path": "routes/fileServer.ts",
          "start_line": 33,
          "end_line": 33,
          "start_column": 20,
          "end_column": 46
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/103/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 102,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/102",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/102",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-open-redirect.express-open-redirect",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-open-redirect.express-open-redirect",
        "name": "javascript.express.security.audit.express-open-redirect.express-open-redirect",
        "tags": [
          "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
          "HIGH CONFIDENCE",
          "OWASP-A01:2021 - Broken Access Control",
          "security"
        ],
        "full_description": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",
        "help": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-open-redirect.express-open-redirect)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-open-redirect.express-open-redirect"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "The application redirects to a URL specified by user-supplied input `query` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."
        },
        "location": {
          "path": "routes/redirect.ts",
          "start_line": 19,
          "end_line": 19,
          "start_column": 20,
          "end_column": 25
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/102/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 101,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/101",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/101",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent",
        "name": "javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent",
        "tags": [
          "CWE-611: Improper Restriction of XML External Entity Reference",
          "LOW CONFIDENCE",
          "OWASP-A04:2017 - XML External Entities (XXE)",
          "OWASP-A05:2021 - Security Misconfiguration",
          "security"
        ],
        "full_description": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.",
        "help": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it."
        },
        "location": {
          "path": "routes/fileUpload.ts",
          "start_line": 83,
          "end_line": 83,
          "start_column": 24,
          "end_column": 140
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/101/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 100,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/100",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/100",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.injection.raw-html-format.raw-html-format",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.injection.raw-html-format.raw-html-format",
        "name": "javascript.express.security.injection.raw-html-format.raw-html-format",
        "tags": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          "MEDIUM CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
          "security"
        ],
        "full_description": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.",
        "help": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.injection.raw-html-format.raw-html-format)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.injection.raw-html-format.raw-html-format"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within."
        },
        "location": {
          "path": "routes/chatbot.ts",
          "start_line": 197,
          "end_line": 197,
          "start_column": 46,
          "end_column": 56
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/100/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 99,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/99",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/99",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "html.security.audit.missing-integrity.missing-integrity",
        "severity": "warning",
        "description": "Semgrep Finding: html.security.audit.missing-integrity.missing-integrity",
        "name": "html.security.audit.missing-integrity.missing-integrity",
        "tags": [
          "CWE-353: Missing Support for Integrity Check",
          "LOW CONFIDENCE",
          "OWASP-A08:2021 - Software and Data Integrity Failures",
          "security"
        ],
        "full_description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "help": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n",
        "help_uri": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
        },
        "location": {
          "path": "frontend/src/index.html",
          "start_line": 16,
          "end_line": 16,
          "start_column": 3,
          "end_column": 86
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/99/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 98,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/98",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/98",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "html.security.audit.missing-integrity.missing-integrity",
        "severity": "warning",
        "description": "Semgrep Finding: html.security.audit.missing-integrity.missing-integrity",
        "name": "html.security.audit.missing-integrity.missing-integrity",
        "tags": [
          "CWE-353: Missing Support for Integrity Check",
          "LOW CONFIDENCE",
          "OWASP-A08:2021 - Software and Data Integrity Failures",
          "security"
        ],
        "full_description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "help": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n",
        "help_uri": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
        },
        "location": {
          "path": "frontend/src/index.html",
          "start_line": 15,
          "end_line": 15,
          "start_column": 3,
          "end_column": 101
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/98/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 97,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/97",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/97",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "html.security.audit.missing-integrity.missing-integrity",
        "severity": "warning",
        "description": "Semgrep Finding: html.security.audit.missing-integrity.missing-integrity",
        "name": "html.security.audit.missing-integrity.missing-integrity",
        "tags": [
          "CWE-353: Missing Support for Integrity Check",
          "LOW CONFIDENCE",
          "OWASP-A08:2021 - Software and Data Integrity Failures",
          "security"
        ],
        "full_description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "help": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n",
        "help_uri": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files."
        },
        "location": {
          "path": "frontend/src/index.html",
          "start_line": 14,
          "end_line": 14,
          "start_column": 3,
          "end_column": 127
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/97/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 96,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/96",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/96",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
        "severity": "note",
        "description": "Semgrep Finding: javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
        "name": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
        "tags": [
          "CWE-134: Use of Externally-Controlled Format String",
          "LOW CONFIDENCE",
          "OWASP-A01:2021 - Broken Access Control",
          "security"
        ],
        "full_description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "help": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring)\n - [https://cwe.mitre.org/data/definitions/134.html](https://cwe.mitre.org/data/definitions/134.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
        },
        "location": {
          "path": "server.ts",
          "start_line": 154,
          "end_line": 154,
          "start_column": 21,
          "end_column": 63
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/96/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 95,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/95",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/95",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop",
        "name": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop",
        "tags": [
          "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes",
          "LOW CONFIDENCE",
          "OWASP-A08:2021 - Software and Data Integrity Failures",
          "security"
        ],
        "full_description": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
        "help": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop)\n - [https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n",
        "help_uri": "https://semgrep.dev/r/javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
        },
        "location": {
          "path": "frontend/src/hacking-instructor/helpers/helpers.ts",
          "start_line": 38,
          "end_line": 38,
          "start_column": 9,
          "end_column": 54
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/95/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 94,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/94",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/94",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.lang.security.audit.code-string-concat.code-string-concat",
        "severity": "error",
        "description": "Semgrep Finding: javascript.lang.security.audit.code-string-concat.code-string-concat",
        "name": "javascript.lang.security.audit.code-string-concat.code-string-concat",
        "tags": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
          "HIGH CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.",
        "help": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.code-string-concat.code-string-concat)\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)\n - [https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback](https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback)\n - [https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/](https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/)\n - [https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html](https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.lang.security.audit.code-string-concat.code-string-concat"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible."
        },
        "location": {
          "path": "routes/userProfile.ts",
          "start_line": 62,
          "end_line": 62,
          "start_column": 20,
          "end_column": 30
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/94/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 93,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/93",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/93",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "severity": "error",
        "description": "Semgrep Finding: generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "name": "generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "tags": [
          "CWE-321: Use of Hard-coded Cryptographic Key",
          "LOW CONFIDENCE",
          "OWASP-A02:2021 - Cryptographic Failures",
          "security"
        ],
        "full_description": "JWT token detected",
        "help": "JWT token detected\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token)\n - [https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n",
        "help_uri": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "JWT token detected"
        },
        "location": {
          "path": "frontend/src/app/last-login-ip/last-login-ip.component.spec.ts",
          "start_line": 67,
          "end_line": 67,
          "start_column": 36,
          "end_column": 89
        },
        "classifications": [
          "test"
        ]
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/93/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 92,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/92",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/92",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "severity": "error",
        "description": "Semgrep Finding: generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "name": "generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "tags": [
          "CWE-321: Use of Hard-coded Cryptographic Key",
          "LOW CONFIDENCE",
          "OWASP-A02:2021 - Cryptographic Failures",
          "security"
        ],
        "full_description": "JWT token detected",
        "help": "JWT token detected\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token)\n - [https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n",
        "help_uri": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "JWT token detected"
        },
        "location": {
          "path": "frontend/src/app/last-login-ip/last-login-ip.component.spec.ts",
          "start_line": 61,
          "end_line": 61,
          "start_column": 36,
          "end_column": 120
        },
        "classifications": [
          "test"
        ]
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/92/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 91,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/91",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/91",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "severity": "error",
        "description": "Semgrep Finding: generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "name": "generic.secrets.security.detected-jwt-token.detected-jwt-token",
        "tags": [
          "CWE-321: Use of Hard-coded Cryptographic Key",
          "LOW CONFIDENCE",
          "OWASP-A02:2021 - Cryptographic Failures",
          "security"
        ],
        "full_description": "JWT token detected",
        "help": "JWT token detected\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token)\n - [https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n",
        "help_uri": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "JWT token detected"
        },
        "location": {
          "path": "frontend/src/app/app.guard.spec.ts",
          "start_line": 38,
          "end_line": 38,
          "start_column": 36,
          "end_column": 148
        },
        "classifications": [
          "test"
        ]
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/91/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 90,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/90",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/90",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "tags": [
          "CWE-1333: Inefficient Regular Expression Complexity",
          "LOW CONFIDENCE",
          "OWASP-A05:2021 - Security Misconfiguration",
          "OWASP-A06:2017 - Security Misconfiguration",
          "security"
        ],
        "full_description": "RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "help": "RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp)\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n",
        "help_uri": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "RegExp() called with a `challengeKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
        },
        "location": {
          "path": "lib/codingChallenges.ts",
          "start_line": 78,
          "end_line": 78,
          "start_column": 16,
          "end_column": 77
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/90/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 89,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/89",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/89",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "tags": [
          "CWE-1333: Inefficient Regular Expression Complexity",
          "LOW CONFIDENCE",
          "OWASP-A05:2021 - Security Misconfiguration",
          "OWASP-A06:2017 - Security Misconfiguration",
          "security"
        ],
        "full_description": "RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "help": "RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp)\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n",
        "help_uri": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "RegExp() called with a `challengeKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
        },
        "location": {
          "path": "lib/codingChallenges.ts",
          "start_line": 76,
          "end_line": 76,
          "start_column": 9,
          "end_column": 67
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/89/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 88,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/88",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/88",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
        "name": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
        "tags": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          "LOW CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
          "security"
        ],
        "full_description": "Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.",
        "help": "Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag)\n - [https://www.developsec.com/2017/11/09/xss-in-a-script-tag/](https://www.developsec.com/2017/11/09/xss-in-a-script-tag/)\n - [https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68](https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68)\n",
        "help_uri": "https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data."
        },
        "location": {
          "path": "routes/videoHandler.ts",
          "start_line": 71,
          "end_line": 71,
          "start_column": 165,
          "end_column": 169
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/88/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 87,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/87",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/87",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
        "name": "javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
        "tags": [
          "CWE-798: Use of Hard-coded Credentials",
          "HIGH CONFIDENCE",
          "OWASP-A07:2021 - Identification and Authentication Failures",
          "security"
        ],
        "full_description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
        "help": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
        "help_uri": "https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 56,
          "end_line": 56,
          "start_column": 56,
          "end_column": 66
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/87/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 86,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/86",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/86",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape",
        "name": "javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape",
        "tags": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          "LOW CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
          "security"
        ],
        "full_description": "Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",
        "help": "Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape)\n - [https://pugjs.org/language/code.html#unescaped-buffered-code](https://pugjs.org/language/code.html#unescaped-buffered-code)\n - [https://pugjs.org/language/attributes.html#unescaped-attributes](https://pugjs.org/language/attributes.html#unescaped-attributes)\n",
        "help_uri": "https://semgrep.dev/r/javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location."
        },
        "location": {
          "path": "views/promotionVideo.pug",
          "start_line": 79,
          "end_line": 79,
          "start_column": 13,
          "end_column": 40
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/86/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 85,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/85",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/85",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "severity": "error",
        "description": "Semgrep Finding: javascript.browser.security.insecure-document-method.insecure-document-method",
        "name": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "tags": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          "LOW CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
          "security"
        ],
        "full_description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "help": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
        "help_uri": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
        },
        "location": {
          "path": "frontend/src/hacking-instructor/index.ts",
          "start_line": 122,
          "end_line": 122,
          "start_column": 3,
          "end_column": 43
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/85/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 84,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/84",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/84",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "severity": "error",
        "description": "Semgrep Finding: javascript.browser.security.insecure-document-method.insecure-document-method",
        "name": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "tags": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          "LOW CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
          "security"
        ],
        "full_description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "help": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
        "help_uri": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
        },
        "location": {
          "path": "frontend/src/assets/private/three.js",
          "start_line": 11375,
          "end_line": 11375,
          "start_column": 3,
          "end_column": 45
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/84/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 83,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/83",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/83",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.browser.security.eval-detected.eval-detected",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.browser.security.eval-detected.eval-detected",
        "name": "javascript.browser.security.eval-detected.eval-detected",
        "tags": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
          "LOW CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
        "help": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
        "help_uri": "https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
        },
        "location": {
          "path": "routes/userProfile.ts",
          "start_line": 62,
          "end_line": 62,
          "start_column": 20,
          "end_column": 30
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/83/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 82,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/82",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/82",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "javascript.browser.security.eval-detected.eval-detected",
        "severity": "warning",
        "description": "Semgrep Finding: javascript.browser.security.eval-detected.eval-detected",
        "name": "javascript.browser.security.eval-detected.eval-detected",
        "tags": [
          "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
          "LOW CONFIDENCE",
          "OWASP-A03:2021 - Injection",
          "security"
        ],
        "full_description": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
        "help": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
        "help_uri": "https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
        },
        "location": {
          "path": "routes/captcha.ts",
          "start_line": 23,
          "end_line": 23,
          "start_column": 20,
          "end_column": 36
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/82/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 81,
      "created_at": "2025-06-17T09:31:05Z",
      "updated_at": "2025-06-17T17:39:06Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/81",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/81",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "generic.secrets.security.detected-generic-secret.detected-generic-secret",
        "severity": "error",
        "description": "Semgrep Finding: generic.secrets.security.detected-generic-secret.detected-generic-secret",
        "name": "generic.secrets.security.detected-generic-secret.detected-generic-secret",
        "tags": [
          "CWE-798: Use of Hard-coded Credentials",
          "LOW CONFIDENCE",
          "OWASP-A07:2021 - Identification and Authentication Failures",
          "security"
        ],
        "full_description": "Generic Secret detected",
        "help": "Generic Secret detected\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-generic-secret.detected-generic-secret)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n",
        "help_uri": "https://semgrep.dev/r/generic.secrets.security.detected-generic-secret.detected-generic-secret"
      },
      "tool": {
        "name": "Semgrep",
        "guid": null,
        "version": "1.36.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:semgrep",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:semgrep",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Generic Secret detected"
        },
        "location": {
          "path": "data/static/users.yml",
          "start_line": 150,
          "end_line": 150,
          "start_column": 7,
          "end_column": 47
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/81/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 80,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/80",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/80",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sensitive-get-query",
        "severity": "warning",
        "description": "Sensitive data read from GET request",
        "name": "js/sensitive-get-query",
        "tags": [
          "external/cwe/cwe-598",
          "security"
        ],
        "full_description": "Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.",
        "help": "# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Route handler for GET requests uses query parameter as sensitive data."
        },
        "location": {
          "path": "routes/changePassword.ts",
          "start_line": 17,
          "end_line": 17,
          "start_column": 28,
          "end_column": 40
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/80/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 79,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/79",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/79",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sensitive-get-query",
        "severity": "warning",
        "description": "Sensitive data read from GET request",
        "name": "js/sensitive-get-query",
        "tags": [
          "external/cwe/cwe-598",
          "security"
        ],
        "full_description": "Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.",
        "help": "# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Route handler for GET requests uses query parameter as sensitive data."
        },
        "location": {
          "path": "routes/changePassword.ts",
          "start_line": 15,
          "end_line": 15,
          "start_column": 25,
          "end_column": 34
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/79/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 78,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/78",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/78",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sensitive-get-query",
        "severity": "warning",
        "description": "Sensitive data read from GET request",
        "name": "js/sensitive-get-query",
        "tags": [
          "external/cwe/cwe-598",
          "security"
        ],
        "full_description": "Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.",
        "help": "# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Route handler for GET requests uses query parameter as sensitive data."
        },
        "location": {
          "path": "routes/changePassword.ts",
          "start_line": 14,
          "end_line": 14,
          "start_column": 29,
          "end_column": 42
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/78/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 77,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/77",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/77",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sql-injection",
        "severity": "error",
        "description": "Database query built from user-controlled sources",
        "name": "js/sql-injection",
        "tags": [
          "external/cwe/cwe-089",
          "external/cwe/cwe-090",
          "external/cwe/cwe-943",
          "security"
        ],
        "full_description": "Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.",
        "help": "# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This query object depends on a user-provided value.\nThis query object depends on a user-provided value."
        },
        "location": {
          "path": "routes/updateProductReviews.ts",
          "start_line": 18,
          "end_line": 18,
          "start_column": 7,
          "end_column": 27
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/77/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 76,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/76",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/76",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sql-injection",
        "severity": "error",
        "description": "Database query built from user-controlled sources",
        "name": "js/sql-injection",
        "tags": [
          "external/cwe/cwe-089",
          "external/cwe/cwe-090",
          "external/cwe/cwe-943",
          "security"
        ],
        "full_description": "Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.",
        "help": "# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This query string depends on a user-provided value."
        },
        "location": {
          "path": "routes/search.ts",
          "start_line": 23,
          "end_line": 23,
          "start_column": 28,
          "end_column": 160
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/76/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 75,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/75",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/75",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sql-injection",
        "severity": "error",
        "description": "Database query built from user-controlled sources",
        "name": "js/sql-injection",
        "tags": [
          "external/cwe/cwe-089",
          "external/cwe/cwe-090",
          "external/cwe/cwe-943",
          "security"
        ],
        "full_description": "Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.",
        "help": "# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This query string depends on a user-provided value.\nThis query string depends on a user-provided value."
        },
        "location": {
          "path": "routes/login.ts",
          "start_line": 34,
          "end_line": 34,
          "start_column": 28,
          "end_column": 170
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/75/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 74,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/74",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/74",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sql-injection",
        "severity": "error",
        "description": "Database query built from user-controlled sources",
        "name": "js/sql-injection",
        "tags": [
          "external/cwe/cwe-089",
          "external/cwe/cwe-090",
          "external/cwe/cwe-943",
          "security"
        ],
        "full_description": "Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.",
        "help": "# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This query object depends on a user-provided value.\nThis query object depends on a user-provided value."
        },
        "location": {
          "path": "routes/likeProductReviews.ts",
          "start_line": 51,
          "end_line": 51,
          "start_column": 11,
          "end_column": 22
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/74/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 73,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/73",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/73",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sql-injection",
        "severity": "error",
        "description": "Database query built from user-controlled sources",
        "name": "js/sql-injection",
        "tags": [
          "external/cwe/cwe-089",
          "external/cwe/cwe-090",
          "external/cwe/cwe-943",
          "security"
        ],
        "full_description": "Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.",
        "help": "# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This query object depends on a user-provided value.\nThis query object depends on a user-provided value."
        },
        "location": {
          "path": "routes/likeProductReviews.ts",
          "start_line": 43,
          "end_line": 43,
          "start_column": 74,
          "end_column": 85
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/73/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 72,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/72",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/72",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sql-injection",
        "severity": "error",
        "description": "Database query built from user-controlled sources",
        "name": "js/sql-injection",
        "tags": [
          "external/cwe/cwe-089",
          "external/cwe/cwe-090",
          "external/cwe/cwe-943",
          "security"
        ],
        "full_description": "Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.",
        "help": "# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This query object depends on a user-provided value.\nThis query object depends on a user-provided value."
        },
        "location": {
          "path": "routes/likeProductReviews.ts",
          "start_line": 36,
          "end_line": 36,
          "start_column": 9,
          "end_column": 20
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/72/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 71,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/71",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/71",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/sql-injection",
        "severity": "error",
        "description": "Database query built from user-controlled sources",
        "name": "js/sql-injection",
        "tags": [
          "external/cwe/cwe-089",
          "external/cwe/cwe-090",
          "external/cwe/cwe-943",
          "security"
        ],
        "full_description": "Building a database query from user-controlled sources is vulnerable to insertion of malicious code by the user.",
        "help": "# Database query built from user-controlled sources\nIf a database query (such as a SQL or NoSQL query) is built from user-provided data without sufficient sanitization, a malicious user may be able to run malicious database queries.\n\n\n## Recommendation\nMost database connector libraries offer a way of safely embedding untrusted data into a query by means of query parameters or prepared statements.\n\nFor NoSQL queries, make use of an operator like MongoDB's `$eq` to ensure that untrusted data is interpreted as a literal value and not as a query object. Alternatively, check that the untrusted data is a literal value and not a query object before using it in a query.\n\nFor SQL queries, use query parameters or prepared statements to embed untrusted data into the query string, or use a library like `sqlstring` to escape untrusted data.\n\n\n## Example\nIn the following example, assume the function `handler` is an HTTP request handler in a web application, whose parameter `req` contains the request object.\n\nThe handler constructs an SQL query string from user input and executes it as a database query using the `pg` library. The user input may contain quote characters, so this code is vulnerable to a SQL injection attack.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // BAD: the category might have SQL special characters in it\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    req.params.category +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\nTo fix this vulnerability, we can use query parameters to embed the user input into the query string. In this example, we use the API offered by the `pg` Postgres database connector library, but other libraries offer similar features. This version is immune to injection attacks.\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: use parameters\n  var query2 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=$1 ORDER BY PRICE\";\n  pool.query(query2, [req.params.category], function(err, results) {\n    // process results\n  });\n});\n\n```\nAlternatively, we can use a library like `sqlstring` to escape the user input before embedding it into the query string:\n\n\n```javascript\nconst app = require(\"express\")(),\n      pg = require(\"pg\"),\n      SqlString = require('sqlstring'),\n      pool = new pg.Pool(config);\n\napp.get(\"search\", function handler(req, res) {\n  // GOOD: the category is escaped using mysql.escape\n  var query1 =\n    \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='\" +\n    SqlString.escape(req.params.category) +\n    \"' ORDER BY PRICE\";\n  pool.query(query1, [], function(err, results) {\n    // process results\n  });\n});\n\n```\n\n## Example\nIn the following example, an express handler attempts to delete a single document from a MongoDB collection. The document to be deleted is identified by its `_id` field, which is constructed from user input. The user input may contain a query object, so this code is vulnerable to a NoSQL injection attack.\n\n\n```javascript\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst Todo = mongoose.model(\n  \"Todo\",\n  new mongoose.Schema({ text: { type: String } }, { timestamps: true })\n);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n\n  await Todo.deleteOne({ _id: id }); // BAD: id might be an object with special properties\n\n  res.json({ status: \"ok\" });\n});\n\n```\nTo fix this vulnerability, we can use the `$eq` operator to ensure that the user input is interpreted as a literal value and not as a query object:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  await Todo.deleteOne({ _id: { $eq: id } }); // GOOD: using $eq operator for the comparison\n\n  res.json({ status: \"ok\" });\n});\n```\nAlternatively check that the user input is a literal value and not a query object before using it:\n\n\n```javascript\napp.delete(\"/api/delete\", async (req, res) => {\n  let id = req.body.id;\n  if (typeof id !== \"string\") {\n    res.status(400).json({ status: \"error\" });\n    return;\n  }\n  await Todo.deleteOne({ _id: id }); // GOOD: id is guaranteed to be a string\n\n  res.json({ status: \"ok\" });\n});\n\n```\n\n## References\n* Wikipedia: [SQL injection](https://en.wikipedia.org/wiki/SQL_injection).\n* MongoDB: [$eq operator](https://docs.mongodb.com/manual/reference/operator/query/eq).\n* OWASP: [NoSQL injection](https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf).\n* Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).\n* Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n* Common Weakness Enumeration: [CWE-943](https://cwe.mitre.org/data/definitions/943.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This query object depends on a user-provided value.\nThis query object depends on a user-provided value."
        },
        "location": {
          "path": "routes/likeProductReviews.ts",
          "start_line": 25,
          "end_line": 25,
          "start_column": 57,
          "end_column": 68
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/71/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 70,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/70",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/70",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/prototype-polluting-assignment",
        "severity": "warning",
        "description": "Prototype-polluting assignment",
        "name": "js/prototype-polluting-assignment",
        "tags": [
          "external/cwe/cwe-078",
          "external/cwe/cwe-079",
          "external/cwe/cwe-094",
          "external/cwe/cwe-400",
          "external/cwe/cwe-471",
          "external/cwe/cwe-915",
          "security"
        ],
        "full_description": "Modifying an object obtained via a user-controlled property name may lead to accidental mutation of the built-in Object prototype, and possibly escalate to remote code execution or cross-site scripting.",
        "help": "# Prototype-polluting assignment\nMost JavaScript objects inherit the properties of the built-in `Object.prototype` object. Prototype pollution is a type of vulnerability in which an attacker is able to modify `Object.prototype`. Since most objects inherit from the compromised `Object.prototype` object, the attacker can use this to tamper with the application logic, and often escalate to remote code execution or cross-site scripting.\n\nOne way to cause prototype pollution is by modifying an object obtained via a user-controlled property name. Most objects have a special `__proto__` property that refers to `Object.prototype`. An attacker can abuse this special property to trick the application into performing unintended modifications of `Object.prototype`.\n\n\n## Recommendation\nUse an associative data structure that is resilient to untrusted key values, such as a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map). In some cases, a prototype-less object created with [Object.create(null)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) may be preferable.\n\nAlternatively, restrict the computed property name so it can't clash with a built-in property, either by prefixing it with a constant string, or by rejecting inputs that don't conform to the expected format.\n\n\n## Example\nIn the example below, the untrusted value `req.params.id` is used as the property name `req.session.todos[id]`. If a malicious user passes in the ID value `__proto__`, the variable `items` will then refer to `Object.prototype`. Finally, the modification of `items` then allows the attacker to inject arbitrary properties onto `Object.prototype`.\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    let items = req.session.todos[id];\n    if (!items) {\n        items = req.session.todos[id] = {};\n    }\n    items[req.query.name] = req.query.text;\n    res.end(200);\n});\n\n```\nOne way to fix this is to use [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects to associate key/value pairs instead of regular objects, as shown below:\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    let items = req.session.todos.get(id);\n    if (!items) {\n        items = new Map();\n        req.sessions.todos.set(id, items);\n    }\n    items.set(req.query.name, req.query.text);\n    res.end(200);\n});\n\n```\nAnother way to fix it is to prevent the `__proto__` property from being used as a key, as shown below:\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    if (id === '__proto__' || id === 'constructor' || id === 'prototype') {\n        res.end(403);\n        return;\n    }\n    let items = req.session.todos[id];\n    if (!items) {\n        items = req.session.todos[id] = {};\n    }\n    items[req.query.name] = req.query.text;\n    res.end(200);\n});\n\n```\n\n## References\n* MDN: [Object.prototype.__proto__](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto)\n* MDN: [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n* Common Weakness Enumeration: [CWE-471](https://cwe.mitre.org/data/definitions/471.html).\n* Common Weakness Enumeration: [CWE-915](https://cwe.mitre.org/data/definitions/915.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This assignment may alter Object.prototype if a malicious '__proto__' string is injected from user controlled input.\nThis assignment may alter Object.prototype if a malicious '__proto__' string is injected from user controlled input."
        },
        "location": {
          "path": "lib/accuracy.ts",
          "start_line": 67,
          "end_line": 67,
          "start_column": 5,
          "end_column": 25
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/70/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 69,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/69",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/69",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/insufficient-password-hash",
        "severity": "warning",
        "description": "Use of password hash with insufficient computational effort",
        "name": "js/insufficient-password-hash",
        "tags": [
          "external/cwe/cwe-916",
          "security"
        ],
        "full_description": "Creating a hash of a password with low computational effort makes the hash vulnerable to password cracking attacks.",
        "help": "# Use of password hash with insufficient computational effort\nStoring cryptographic hashes of passwords is standard security practice, but it is equally important to select the right hashing scheme. If an attacker obtains the hashed passwords of an application, the password hashing scheme should still prevent the attacker from easily obtaining the original cleartext passwords.\n\nA good password hashing scheme requires a computation that cannot be done efficiently. Standard hashing schemes, such as `md5` or `sha1`, are efficiently computable, and are therefore not suitable for password hashing.\n\n\n## Recommendation\nUse a secure password hashing scheme such as `bcrypt`, `scrypt`, `PBKDF2`, or `Argon2`.\n\n\n## Example\nIn the example below, the `md5` algorithm computes the hash of a password.\n\n\n```javascript\nconst crypto = require(\"crypto\");\nfunction hashPassword(password) {\n    var hasher = crypto.createHash('md5');\n    var hashed = hasher.update(password).digest(\"hex\"); // BAD\n    return hashed;\n}\n\n```\nThis is not secure, since the password can be efficiently cracked by an attacker that obtains the hash. A more secure scheme is to hash the password with the `bcrypt` algorithm:\n\n\n```javascript\nconst bcrypt = require(\"bcrypt\");\nfunction hashPassword(password, salt) {\n  var hashed = bcrypt.hashSync(password, salt); // GOOD\n  return hashed;\n}\n\n```\n\n## References\n* OWASP: [Password storage](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Password from an access to password is hashed insecurely.\nPassword from an access to password is hashed insecurely.\nPassword from an access to clearTextPassword is hashed insecurely.\nPassword from an access to password is hashed insecurely.\nPassword from an access to password is hashed insecurely.\nPassword from an access to currentPassword is hashed insecurely.\nPassword from an access to currentPassword is hashed insecurely.\nPassword from an access to password is hashed insecurely."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 43,
          "end_line": 43,
          "start_column": 71,
          "end_column": 75
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/69/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 68,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/68",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/68",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-token-validation",
        "severity": "error",
        "description": "Missing CSRF middleware",
        "name": "js/missing-token-validation",
        "tags": [
          "external/cwe/cwe-352",
          "security"
        ],
        "full_description": "Using cookies without CSRF protection may allow malicious websites to submit requests on behalf of the user.",
        "help": "# Missing CSRF middleware\nWebsites that rely on cookie-based authentication may be vulnerable to cross-site request forgery (CSRF). Specifically, a state-changing request should include a secret token so the request can't be forged by an attacker. Otherwise, unwanted requests can be submitted on behalf of a user who visits a malicious website.\n\nThis is typically mitigated by embedding a session-specific secret token in each request. This token is then checked as an additional authentication measure. A malicious website should have no way of guessing the correct token to embed in the request.\n\n\n## Recommendation\nUse a middleware package such as `lusca.csrf` to protect against CSRF attacks.\n\n\n## Example\nIn the example below, the server authenticates users before performing the `changeEmail` POST action:\n\n\n```javascript\nconst app = require(\"express\")(),\n  cookieParser = require(\"cookie-parser\"),\n  bodyParser = require(\"body-parser\"),\n  session = require(\"express-session\");\n\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(session({ secret: process.env['SECRET'], cookie: { maxAge: 60000 } }));\n\n// ...\n\napp.post(\"/changeEmail\", function(req, res) {\n  const userId = req.session.id;\n  const email = req.body[\"email\"];\n  // ... update email associated with userId\n});\n\n```\nThis is not secure. An attacker can submit a POST `changeEmail` request on behalf of a user who visited a malicious website. Since authentication happens without any action from the user, the `changeEmail` action would be executed, despite not being initiated by the user.\n\nThis vulnerability can be mitigated by installing a CSRF protecting middleware handler:\n\n\n```javascript\nconst app = require(\"express\")(),\n  cookieParser = require(\"cookie-parser\"),\n  bodyParser = require(\"body-parser\"),\n  session = require(\"express-session\"),\n  csrf = require('lusca').csrf;\n\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(session({ secret: process.env['SECRET'], cookie: { maxAge: 60000 } }));\napp.use(csrf());\n\n// ...\n\napp.post(\"/changeEmail\", function(req, res) {\n  const userId = req.session.id;\n  const email = req.body[\"email\"];\n  // ... update email associated with userId\n});\n\n```\n\n## References\n* OWASP: [Cross-Site Request Forgery (CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))\n* NPM: [lusca](https://www.npmjs.com/package/lusca)\n* Common Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This cookie middleware is serving a request handler without CSRF protection.\nThis cookie middleware is serving a request handler without CSRF protection.\nThis cookie middleware is serving a request handler without CSRF protection.\nThis cookie middleware is serving a request handler without CSRF protection.\nThis cookie middleware is serving a request handler without CSRF protection."
        },
        "location": {
          "path": "server.ts",
          "start_line": 288,
          "end_line": 288,
          "start_column": 11,
          "end_column": 32
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/68/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 67,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/67",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/67",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/server-side-unvalidated-url-redirection",
        "severity": "warning",
        "description": "Server-side URL redirect",
        "name": "js/server-side-unvalidated-url-redirection",
        "tags": [
          "external/cwe/cwe-601",
          "security"
        ],
        "full_description": "Server-side URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
        "help": "# Server-side URL redirect\nDirectly incorporating user input into a URL redirect request without validating the input can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\nIf this is not possible, then the user input should be validated in some other way, for example, by verifying that the target URL is on the same host as the current page.\n\n\n## Example\nThe following example shows an HTTP request parameter being used directly in a URL redirect without validating the input, which facilitates phishing attacks:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"/redirect\", function (req, res) {\n  // BAD: a request parameter is incorporated without validation into a URL redirect\n  res.redirect(req.query[\"target\"]);\n});\n\n```\nOne way to remedy the problem is to validate the user input against a known fixed string before doing the redirection:\n\n\n```javascript\nconst app = require(\"express\")();\n\nconst VALID_REDIRECT = \"http://cwe.mitre.org/data/definitions/601.html\";\n\napp.get(\"/redirect\", function (req, res) {\n  // GOOD: the request parameter is validated against a known fixed string\n  let target = req.query[\"target\"];\n  if (VALID_REDIRECT === target) {\n    res.redirect(target);\n  } else {\n    res.redirect(\"/\");\n  }\n});\n\n```\nAlternatively, we can check that the target URL does not redirect to a different host by parsing it relative to a base URL with a known host and verifying that the host stays the same:\n\n\n```javascript\nconst app = require(\"express\")();\n\nfunction isLocalUrl(path) {\n  try {\n    return (\n      // TODO: consider substituting your own domain for example.com\n      new URL(path, \"https://example.com\").origin === \"https://example.com\"\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\napp.get(\"/redirect\", function (req, res) {\n  // GOOD: check that we don't redirect to a different host\n  let target = req.query[\"target\"];\n  if (isLocalUrl(target)) {\n    res.redirect(target);\n  } else {\n    res.redirect(\"/\");\n  }\n});\n\n```\nNote that as written, the above code will allow redirects to URLs on `example.com`, which is harmless but perhaps not intended. You can substitute your own domain (if known) for `example.com` to prevent this.\n\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Untrusted URL redirection depends on a user-provided value."
        },
        "location": {
          "path": "routes/redirect.ts",
          "start_line": 19,
          "end_line": 19,
          "start_column": 20,
          "end_column": 25
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/67/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 66,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/66",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/66",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/xss",
        "severity": "error",
        "description": "Client-side cross-site scripting",
        "name": "js/xss",
        "tags": [
          "external/cwe/cwe-079",
          "external/cwe/cwe-116",
          "security"
        ],
        "full_description": "Writing user input directly to the DOM allows for a cross-site scripting vulnerability.",
        "help": "# Client-side cross-site scripting\nDirectly writing user input (for example, a URL query parameter) to a webpage without properly sanitizing the input first, allows for a cross-site scripting vulnerability.\n\nThis kind of vulnerability is also called *DOM-based* cross-site scripting, to distinguish it from other types of cross-site scripting.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing user input to the page, or one of the other solutions that are mentioned in the references.\n\n\n## Example\nThe following example shows part of the page URL being written directly to the document, leaving the website vulnerable to cross-site scripting.\n\n\n```javascript\nfunction setLanguageOptions() {\n    var href = document.location.href,\n        deflt = href.substring(href.indexOf(\"default=\")+8);\n    document.write(\"<OPTION value=1>\"+deflt+\"</OPTION>\");\n    document.write(\"<OPTION value=2>English</OPTION>\");\n}\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Cross-site scripting vulnerability due to user-provided value."
        },
        "location": {
          "path": "frontend/src/app/search-result/search-result.component.ts",
          "start_line": 159,
          "end_line": 159,
          "start_column": 65,
          "end_column": 75
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/66/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 65,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/65",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/65",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 650,
          "end_line": 650,
          "start_column": 31,
          "end_column": 48
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/65/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 64,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/64",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/64",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 648,
          "end_line": 648,
          "start_column": 33,
          "end_column": 49
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/64/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 63,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/63",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/63",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 644,
          "end_line": 644,
          "start_column": 24,
          "end_column": 43
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/63/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 62,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/62",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/62",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 643,
          "end_line": 643,
          "start_column": 60,
          "end_column": 76
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/62/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 61,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/61",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/61",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 643,
          "end_line": 643,
          "start_column": 23,
          "end_column": 58
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/61/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 60,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/60",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/60",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 640,
          "end_line": 640,
          "start_column": 21,
          "end_column": 31
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/60/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 59,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/59",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/59",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 639,
          "end_line": 639,
          "start_column": 25,
          "end_column": 41
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/59/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 58,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/58",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/58",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 630,
          "end_line": 630,
          "start_column": 90,
          "end_column": 115
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/58/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 57,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/57",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/57",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 629,
          "end_line": 629,
          "start_column": 119,
          "end_column": 140
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/57/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 56,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/56",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/56",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 628,
          "end_line": 628,
          "start_column": 82,
          "end_column": 98
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/56/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 55,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/55",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/55",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited.\nThis route handler performs a database access, but is not rate-limited.\nThis route handler performs a database access, but is not rate-limited.\nThis route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 615,
          "end_line": 615,
          "start_column": 63,
          "end_column": 83
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/55/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 54,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/54",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/54",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 614,
          "end_line": 614,
          "start_column": 64,
          "end_column": 86
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/54/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 53,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/53",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/53",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 613,
          "end_line": 613,
          "start_column": 41,
          "end_column": 63
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/53/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 52,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/52",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/52",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 612,
          "end_line": 612,
          "start_column": 41,
          "end_column": 61
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/52/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 51,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/51",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/51",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 607,
          "end_line": 607,
          "start_column": 64,
          "end_column": 81
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/51/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 50,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/50",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/50",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 603,
          "end_line": 603,
          "start_column": 79,
          "end_column": 101
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/50/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 49,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/49",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/49",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 603,
          "end_line": 603,
          "start_column": 54,
          "end_column": 77
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/49/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 48,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/48",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/48",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 602,
          "end_line": 602,
          "start_column": 66,
          "end_column": 77
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/48/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 47,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/47",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/47",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 602,
          "end_line": 602,
          "start_column": 41,
          "end_column": 64
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/47/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 46,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/46",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/46",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 601,
          "end_line": 601,
          "start_column": 34,
          "end_column": 48
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/46/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 45,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/45",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/45",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 600,
          "end_line": 600,
          "start_column": 30,
          "end_column": 47
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/45/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 44,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/44",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/44",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 599,
          "end_line": 599,
          "start_column": 63,
          "end_column": 75
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/44/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 43,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/43",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/43",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a database access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 595,
          "end_line": 595,
          "start_column": 36,
          "end_column": 48
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/43/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 42,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/42",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/42",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 578,
          "end_line": 578,
          "start_column": 69,
          "end_column": 91
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/42/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 41,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/41",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/41",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 578,
          "end_line": 578,
          "start_column": 32,
          "end_column": 67
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/41/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 40,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/40",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/40",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 574,
          "end_line": 574,
          "start_column": 32,
          "end_column": 39
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/40/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 39,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/39",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/39",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 451,
          "end_line": 451,
          "start_column": 56,
          "end_column": 76
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/39/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 38,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/38",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/38",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 419,
          "end_line": 419,
          "start_column": 33,
          "end_column": 56
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/38/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 37,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/37",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/37",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 305,
          "end_line": 305,
          "start_column": 65,
          "end_column": 88
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/37/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 36,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/36",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/36",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 304,
          "end_line": 304,
          "start_column": 132,
          "end_column": 156
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/36/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 35,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/35",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/35",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 303,
          "end_line": 303,
          "start_column": 157,
          "end_column": 176
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/35/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 34,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/34",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/34",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 282,
          "end_line": 282,
          "start_column": 34,
          "end_column": 49
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/34/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 33,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/33",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/33",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 277,
          "end_line": 277,
          "start_column": 36,
          "end_column": 51
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/33/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 32,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/32",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/32",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs a file system access, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 270,
          "end_line": 270,
          "start_column": 36,
          "end_column": 58
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/32/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 31,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/31",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/31",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/missing-rate-limiting",
        "severity": "warning",
        "description": "Missing rate limiting",
        "name": "js/missing-rate-limiting",
        "tags": [
          "external/cwe/cwe-307",
          "external/cwe/cwe-400",
          "external/cwe/cwe-770",
          "security"
        ],
        "full_description": "An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.",
        "help": "# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This route handler performs authorization, but is not rate-limited."
        },
        "location": {
          "path": "server.ts",
          "start_line": 269,
          "end_line": 269,
          "start_column": 40,
          "end_column": 58
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/31/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 30,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/30",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/30",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/request-forgery",
        "severity": "error",
        "description": "Server-side request forgery",
        "name": "js/request-forgery",
        "tags": [
          "external/cwe/cwe-918",
          "security"
        ],
        "full_description": "Making a network request with user-controlled data in the URL allows for request forgery attacks.",
        "help": "# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "The URL of this request depends on a user-provided value."
        },
        "location": {
          "path": "routes/profileImageUrlUpload.ts",
          "start_line": 24,
          "end_line": 24,
          "start_column": 34,
          "end_column": 44
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/30/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 29,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/29",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/29",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/functionality-from-untrusted-source",
        "severity": "warning",
        "description": "Inclusion of functionality from an untrusted source",
        "name": "js/functionality-from-untrusted-source",
        "tags": [
          "external/cwe/cwe-830",
          "security"
        ],
        "full_description": "Including functionality from an untrusted source may allow an attacker to control the functionality and execute arbitrary code.",
        "help": "# Inclusion of functionality from an untrusted source\nIncluding a resource from an untrusted source or using an untrusted channel may allow an attacker to include arbitrary code in the response. When including an external resource (for example, a `script` element or an `iframe` element) on a page, it is important to ensure that the received data is not malicious.\n\nWhen including external resources, it is possible to verify that the responding server is the intended one by using an `https` URL. This prevents a MITM (man-in-the-middle) attack where an attacker might have been able to spoof a server response.\n\nEven when `https` is used, an attacker might still compromise the server. When you use a `script` element, you can check for subresource integrity - that is, you can check the contents of the data received by supplying a cryptographic digest of the expected sources to the `script` element. The script will only load sources that match the digest and an attacker will be unable to modify the script even when the server is compromised.\n\nSubresource integrity (SRI) checking is commonly recommended when importing a fixed version of a library - for example, from a CDN (content-delivery network). Then, the fixed digest of that version of the library can easily be added to the `script` element's `integrity` attribute.\n\nA dynamic service cannot be easily used with SRI. Nevertheless, it is possible to list multiple acceptable SHA hashes in the `integrity` attribute, such as those for the content generated for major browers used by your users.\n\nSee the \\[\\`CUSTOMIZING.md\\`\\](https://github.com/github/codeql/blob/main/javascript/ql/src/Security/CWE-830/CUSTOMIZING.md) file in the source code for this query for information on how to extend the list of hostnames required to use SRI by this query.\n\n\n## Recommendation\nWhen an `iframe` element is used to embed a page, it is important to use an `https` URL.\n\nWhen using a `script` element to load a script, it is important to use an `https` URL and to consider checking subresource integrity.\n\n\n## Example\nThe following example loads the jQuery library from the jQuery CDN without using `https` and without checking subresource integrity.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"http://code.jquery.com/jquery-3.6.0.slim.min.js\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\nInstead, loading jQuery from the same domain using `https` and checking subresource integrity is recommended, as in the next example.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"https://code.jquery.com/jquery-3.6.0.slim.min.js\" integrity=\"sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\n\n## References\n* MDN: [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)\n* Smashing Magazine: [Understanding Subresource Integrity](https://www.smashingmagazine.com/2019/04/understanding-subresource-integrity/)\n* Common Weakness Enumeration: [CWE-830](https://cwe.mitre.org/data/definitions/830.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Script loaded from content delivery network with no integrity check."
        },
        "location": {
          "path": "frontend/src/index.html",
          "start_line": 15,
          "end_line": 15,
          "start_column": 3,
          "end_column": 101
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/29/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 28,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/28",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/28",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/functionality-from-untrusted-source",
        "severity": "warning",
        "description": "Inclusion of functionality from an untrusted source",
        "name": "js/functionality-from-untrusted-source",
        "tags": [
          "external/cwe/cwe-830",
          "security"
        ],
        "full_description": "Including functionality from an untrusted source may allow an attacker to control the functionality and execute arbitrary code.",
        "help": "# Inclusion of functionality from an untrusted source\nIncluding a resource from an untrusted source or using an untrusted channel may allow an attacker to include arbitrary code in the response. When including an external resource (for example, a `script` element or an `iframe` element) on a page, it is important to ensure that the received data is not malicious.\n\nWhen including external resources, it is possible to verify that the responding server is the intended one by using an `https` URL. This prevents a MITM (man-in-the-middle) attack where an attacker might have been able to spoof a server response.\n\nEven when `https` is used, an attacker might still compromise the server. When you use a `script` element, you can check for subresource integrity - that is, you can check the contents of the data received by supplying a cryptographic digest of the expected sources to the `script` element. The script will only load sources that match the digest and an attacker will be unable to modify the script even when the server is compromised.\n\nSubresource integrity (SRI) checking is commonly recommended when importing a fixed version of a library - for example, from a CDN (content-delivery network). Then, the fixed digest of that version of the library can easily be added to the `script` element's `integrity` attribute.\n\nA dynamic service cannot be easily used with SRI. Nevertheless, it is possible to list multiple acceptable SHA hashes in the `integrity` attribute, such as those for the content generated for major browers used by your users.\n\nSee the \\[\\`CUSTOMIZING.md\\`\\](https://github.com/github/codeql/blob/main/javascript/ql/src/Security/CWE-830/CUSTOMIZING.md) file in the source code for this query for information on how to extend the list of hostnames required to use SRI by this query.\n\n\n## Recommendation\nWhen an `iframe` element is used to embed a page, it is important to use an `https` URL.\n\nWhen using a `script` element to load a script, it is important to use an `https` URL and to consider checking subresource integrity.\n\n\n## Example\nThe following example loads the jQuery library from the jQuery CDN without using `https` and without checking subresource integrity.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"http://code.jquery.com/jquery-3.6.0.slim.min.js\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\nInstead, loading jQuery from the same domain using `https` and checking subresource integrity is recommended, as in the next example.\n\n\n```html\n<html>\n    <head>\n        <title>jQuery demo</title>\n        <script src=\"https://code.jquery.com/jquery-3.6.0.slim.min.js\" integrity=\"sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=\" crossorigin=\"anonymous\"></script>\n    </head>\n    <body>\n        ...\n    </body>\n</html>\n```\n\n## References\n* MDN: [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)\n* Smashing Magazine: [Understanding Subresource Integrity](https://www.smashingmagazine.com/2019/04/understanding-subresource-integrity/)\n* Common Weakness Enumeration: [CWE-830](https://cwe.mitre.org/data/definitions/830.html).\n",
        "security_severity_level": "medium"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Script loaded from content delivery network with no integrity check."
        },
        "location": {
          "path": "frontend/src/index.html",
          "start_line": 16,
          "end_line": 16,
          "start_column": 3,
          "end_column": 86
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/28/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 27,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/27",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/27",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/insecure-randomness",
        "severity": "warning",
        "description": "Insecure randomness",
        "name": "js/insecure-randomness",
        "tags": [
          "external/cwe/cwe-338",
          "security"
        ],
        "full_description": "Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.",
        "help": "# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This uses a cryptographically insecure random number generated at Math.random() in a security context."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 55,
          "end_line": 55,
          "start_column": 51,
          "end_column": 69
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/27/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 26,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/26",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/26",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/template-object-injection",
        "severity": "error",
        "description": "Template Object Injection",
        "name": "js/template-object-injection",
        "tags": [
          "external/cwe/cwe-073",
          "external/cwe/cwe-094",
          "security"
        ],
        "full_description": "Instantiating a template using a user-controlled object is vulnerable to local file read and potential remote code execution.",
        "help": "# Template Object Injection\nDirectly using user-controlled objects as arguments to template engines might allow an attacker to do local file reads or even remote code execution.\n\n\n## Recommendation\nAvoid using user-controlled objects as arguments to a template engine. Instead, construct the object explicitly with the specific properties needed by the template.\n\n\n## Example\nIn the example below a server uses the user-controlled `profile` object to render the `index` template.\n\n\n```javascript\nvar app = require('express')();\napp.set('view engine', 'hbs');\n\napp.post('/', function (req, res, next) {\n    var profile = req.body.profile;\n    res.render('index', profile);\n});\n```\nHowever, if an attacker adds a `layout` property to the `profile` object then the server will load the file specified by the `layout` property, thereby allowing an attacker to do local file reads.\n\nThe fix is to have the server construct the object, and only add the properties that are needed by the template.\n\n\n```javascript\nvar app = require('express')();\napp.set('view engine', 'hbs');\n\napp.post('/', function (req, res, next) {\n    var profile = req.body.profile;\n    res.render('index', {\n        name: profile.name,\n        location: profile.location\n    });\n});\n```\n\n## References\n* blog.shoebpatel.com: [The Secret Parameter, LFR, and Potential RCE in NodeJS Apps](https://blog.shoebpatel.com/2021/01/23/The-Secret-Parameter-LFR-and-Potential-RCE-in-NodeJS-Apps/).\n* cwe.mitre.org: [CWE-73: External Control of File Name or Path](https://cwe.mitre.org/data/definitions/73.html)\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Template object depends on a user-provided value.\nTemplate object depends on a user-provided value."
        },
        "location": {
          "path": "routes/dataErasure.ts",
          "start_line": 87,
          "end_line": 89,
          "start_column": 39,
          "end_column": 8
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/26/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 25,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/25",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/25",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/template-object-injection",
        "severity": "error",
        "description": "Template Object Injection",
        "name": "js/template-object-injection",
        "tags": [
          "external/cwe/cwe-073",
          "external/cwe/cwe-094",
          "security"
        ],
        "full_description": "Instantiating a template using a user-controlled object is vulnerable to local file read and potential remote code execution.",
        "help": "# Template Object Injection\nDirectly using user-controlled objects as arguments to template engines might allow an attacker to do local file reads or even remote code execution.\n\n\n## Recommendation\nAvoid using user-controlled objects as arguments to a template engine. Instead, construct the object explicitly with the specific properties needed by the template.\n\n\n## Example\nIn the example below a server uses the user-controlled `profile` object to render the `index` template.\n\n\n```javascript\nvar app = require('express')();\napp.set('view engine', 'hbs');\n\napp.post('/', function (req, res, next) {\n    var profile = req.body.profile;\n    res.render('index', profile);\n});\n```\nHowever, if an attacker adds a `layout` property to the `profile` object then the server will load the file specified by the `layout` property, thereby allowing an attacker to do local file reads.\n\nThe fix is to have the server construct the object, and only add the properties that are needed by the template.\n\n\n```javascript\nvar app = require('express')();\napp.set('view engine', 'hbs');\n\napp.post('/', function (req, res, next) {\n    var profile = req.body.profile;\n    res.render('index', {\n        name: profile.name,\n        location: profile.location\n    });\n});\n```\n\n## References\n* blog.shoebpatel.com: [The Secret Parameter, LFR, and Potential RCE in NodeJS Apps](https://blog.shoebpatel.com/2021/01/23/The-Secret-Parameter-LFR-and-Potential-RCE-in-NodeJS-Apps/).\n* cwe.mitre.org: [CWE-73: External Control of File Name or Path](https://cwe.mitre.org/data/definitions/73.html)\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Template object depends on a user-provided value.\nTemplate object depends on a user-provided value."
        },
        "location": {
          "path": "routes/dataErasure.ts",
          "start_line": 72,
          "end_line": 74,
          "start_column": 41,
          "end_column": 10
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/25/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 24,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/24",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/24",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/vulnCodeSnippet.ts",
          "start_line": 90,
          "end_line": 90,
          "start_column": 60,
          "end_column": 106
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/24/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 23,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/23",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/23",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/vulnCodeSnippet.ts",
          "start_line": 89,
          "end_line": 89,
          "start_column": 21,
          "end_column": 67
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/23/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 22,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/22",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/22",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/vulnCodeFixes.ts",
          "start_line": 81,
          "end_line": 81,
          "start_column": 62,
          "end_column": 108
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/22/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 21,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/21",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/21",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/vulnCodeFixes.ts",
          "start_line": 80,
          "end_line": 80,
          "start_column": 23,
          "end_column": 69
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/21/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 20,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/20",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/20",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/profileImageUrlUpload.ts",
          "start_line": 29,
          "end_line": 29,
          "start_column": 51,
          "end_column": 135
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/20/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 19,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/19",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/19",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/quarantineServer.ts",
          "start_line": 14,
          "end_line": 14,
          "start_column": 20,
          "end_column": 57
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/19/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 18,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/18",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/18",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/fileUpload.ts",
          "start_line": 38,
          "end_line": 38,
          "start_column": 33,
          "end_column": 41
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/18/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 17,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/17",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/17",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/logfileServer.ts",
          "start_line": 14,
          "end_line": 14,
          "start_column": 20,
          "end_column": 47
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/17/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 16,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/16",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/16",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/fileUpload.ts",
          "start_line": 33,
          "end_line": 33,
          "start_column": 15,
          "end_column": 23
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/16/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 15,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/15",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/15",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/keyServer.ts",
          "start_line": 14,
          "end_line": 14,
          "start_column": 20,
          "end_column": 57
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/15/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 14,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/14",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/14",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/path-injection",
        "severity": "error",
        "description": "Uncontrolled data used in path expression",
        "name": "js/path-injection",
        "tags": [
          "external/cwe/cwe-022",
          "external/cwe/cwe-023",
          "external/cwe/cwe-036",
          "external/cwe/cwe-073",
          "external/cwe/cwe-099",
          "security"
        ],
        "full_description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
        "help": "# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This path depends on a user-provided value."
        },
        "location": {
          "path": "routes/fileServer.ts",
          "start_line": 33,
          "end_line": 33,
          "start_column": 20,
          "end_column": 46
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/14/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 13,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/13",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/13",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/zipslip",
        "severity": "error",
        "description": "Arbitrary file access during archive extraction (\"Zip Slip\")",
        "name": "js/zipslip",
        "tags": [
          "external/cwe/cwe-022",
          "security"
        ],
        "full_description": "Extracting files from a malicious ZIP file, or similar type of archive, without validating that the destination file path is within the destination directory can allow an attacker to unexpectedly gain access to resources.",
        "help": "# Arbitrary file access during archive extraction (\"Zip Slip\")\nExtracting files from a malicious zip file, or similar type of archive, is at risk of directory traversal attacks if filenames from the archive are not properly validated. archive paths.\n\nZip archives contain archive entries representing each file in the archive. These entries include a file path for the entry, but these file paths are not restricted and may contain unexpected special elements such as the directory traversal element (`..`). If these file paths are used to create a filesystem path, then a file operation may happen in an unexpected location. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\nFor example, if a zip file contains a file entry `..\\sneaky-file`, and the zip file is extracted to the directory `c:\\output`, then naively combining the paths would result in an output file path of `c:\\output\\..\\sneaky-file`, which would cause the file to be written to `c:\\sneaky-file`.\n\n\n## Recommendation\nEnsure that output paths constructed from zip archive entries are validated to prevent writing files to unexpected locations.\n\nThe recommended way of writing an output file from a zip archive entry is to check that `\"..\"` does not occur in the path.\n\n\n## Example\nIn this example an archive is extracted without validating file paths. If `archive.zip` contained relative paths (for instance, if it were created by something like `zip archive.zip ../file.txt`) then executing this code could write to locations outside the destination directory.\n\n\n```javascript\nconst fs = require('fs');\nconst unzip = require('unzip');\n\nfs.createReadStream('archive.zip')\n  .pipe(unzip.Parse())\n  .on('entry', entry => {\n    const fileName = entry.path;\n    // BAD: This could write any file on the filesystem.\n    entry.pipe(fs.createWriteStream(fileName));\n  });\n\n```\nTo fix this vulnerability, we need to check that the path does not contain any `\"..\"` elements in it.\n\n\n```javascript\nconst fs = require('fs');\nconst unzip = require('unzip');\n\nfs.createReadStream('archive.zip')\n  .pipe(unzip.Parse())\n  .on('entry', entry => {\n    const fileName = entry.path;\n    // GOOD: ensures the path is safe to write to.\n    if (fileName.indexOf('..') == -1) {\n      entry.pipe(fs.createWriteStream(fileName));\n    }\n    else {\n      console.log('skipping bad path', fileName);\n    }\n  });\n\n```\n\n## References\n* Snyk: [Zip Slip Vulnerability](https://snyk.io/research/zip-slip-vulnerability).\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Unsanitized archive entry, which may contain '..', is used in a file system operation."
        },
        "location": {
          "path": "routes/fileUpload.ts",
          "start_line": 41,
          "end_line": 41,
          "start_column": 34,
          "end_column": 44
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/13/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 12,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/12",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/12",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/clear-text-logging",
        "severity": "error",
        "description": "Clear-text logging of sensitive information",
        "name": "js/clear-text-logging",
        "tags": [
          "external/cwe/cwe-312",
          "external/cwe/cwe-359",
          "external/cwe/cwe-532",
          "security"
        ],
        "full_description": "Logging sensitive information without encryption or hashing can expose it to an attacker.",
        "help": "# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This logs sensitive data returned by an access to changePasswordBenderChallenge as clear text.\nThis logs sensitive data returned by an access to weakPasswordChallenge as clear text.\nThis logs sensitive data returned by an access to dlpPasswordSprayingChallenge as clear text.\nThis logs sensitive data returned by an access to oauthUserPasswordChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordJimChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordBenderChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordBjoernChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordMortyChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordBjoernOwaspChallenge as clear text.\nThis logs sensitive data returned by an access to resetPasswordUvoginChallenge as clear text.\nThis logs sensitive data returned by an access to passwordRepeatChallenge as clear text."
        },
        "location": {
          "path": "lib/antiCheat.ts",
          "start_line": 77,
          "end_line": 77,
          "start_column": 15,
          "end_column": 659
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/12/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 11,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/11",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/11",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/server-crash",
        "severity": "warning",
        "description": "Server crash",
        "name": "js/server-crash",
        "tags": [
          "external/cwe/cwe-248",
          "external/cwe/cwe-730",
          "security"
        ],
        "full_description": "A server that can be forced to crash may be vulnerable to denial-of-service attacks.",
        "help": "# Server crash\nServers handle requests from clients until terminated deliberately by a server administrator. A client request that results in an uncaught server-side exception causes the current server response generation to fail, and should not have an effect on subsequent client requests.\n\nUnder some circumstances, uncaught exceptions can however cause the entire server to terminate abruptly. Such a behavior is highly undesirable, especially if it gives malicious users the ability to turn off the server at will, which is an efficient denial-of-service attack.\n\n\n## Recommendation\nEnsure that the processing of client requests can not cause uncaught exceptions to terminate the entire server abruptly.\n\n\n## Example\nThe following server code checks if a client-provided file path is valid before saving data to that path. It would be reasonable to expect that the server responds with an error in case the request contains an invalid file path. However, the server instead throws an exception, which is uncaught in the context of the asynchronous callback invocation (`fs.access(...)`). This causes the entire server to terminate abruptly.\n\n\n```javascript\nconst express = require(\"express\"),\n  fs = require(\"fs\");\n\nfunction save(rootDir, path, content) {\n  if (!isValidPath(rootDir, req.query.filePath)) {\n    throw new Error(`Invalid filePath: ${req.query.filePath}`); // BAD crashes the server\n  }\n  // write content to disk\n}\n\nexpress().post(\"/save\", (req, res) => {\n  fs.access(rootDir, (err) => {\n    if (err) {\n      console.error(\n        `Server setup is corrupted, ${rootDir} cannot be accessed!`\n      );\n      res.status(500);\n      res.end();\n      return;\n    }\n    save(rootDir, req.query.path, req.body);\n    res.status(200);\n    res.end();\n  });\n});\n\n```\nTo remedy this, the server can catch the exception explicitly with a `try/catch` block, and generate an appropriate error response instead:\n\n\n```javascript\n// ...\nexpress().post(\"/save\", (req, res) => {\n  fs.access(rootDir, (err) => {\n    // ...\n    try {\n      save(rootDir, req.query.path, req.body); // GOOD exception is caught below\n      res.status(200);\n      res.end();\n    } catch (e) {\n      res.status(500);\n      res.end();\n    }\n  });\n});\n\n```\nTo simplify exception handling, it may be advisable to switch to async/await syntax instead of using callbacks, which allows wrapping the entire request handler in a `try/catch` block:\n\n\n```javascript\n// ...\nexpress().post(\"/save\", async (req, res) => {\n  try {\n    await fs.promises.access(rootDir);\n    save(rootDir, req.query.path, req.body); // GOOD exception is caught below\n    res.status(200);\n    res.end();\n  } catch (e) {\n    res.status(500);\n    res.end();\n  }\n});\n\n```\n\n## References\n* Common Weakness Enumeration: [CWE-248](https://cwe.mitre.org/data/definitions/248.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "The server of this route handler will terminate when an uncaught exception from this location escapes an asynchronous callback."
        },
        "location": {
          "path": "routes/videoHandler.ts",
          "start_line": 54,
          "end_line": 54,
          "start_column": 24,
          "end_column": 33
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/11/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 10,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/10",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/10",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/incomplete-sanitization",
        "severity": "warning",
        "description": "Incomplete string escaping or encoding",
        "name": "js/incomplete-sanitization",
        "tags": [
          "correctness",
          "external/cwe/cwe-020",
          "external/cwe/cwe-080",
          "external/cwe/cwe-116",
          "security"
        ],
        "full_description": "A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.",
        "help": "# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This replaces only the first occurrence of '..'."
        },
        "location": {
          "path": "server.ts",
          "start_line": 255,
          "end_line": 255,
          "start_column": 28,
          "end_column": 48
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/10/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 9,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/9",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/9",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/incomplete-sanitization",
        "severity": "warning",
        "description": "Incomplete string escaping or encoding",
        "name": "js/incomplete-sanitization",
        "tags": [
          "correctness",
          "external/cwe/cwe-020",
          "external/cwe/cwe-080",
          "external/cwe/cwe-116",
          "security"
        ],
        "full_description": "A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.",
        "help": "# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This does not escape backslash characters in the input."
        },
        "location": {
          "path": "lib/utils.ts",
          "start_line": 48,
          "end_line": 48,
          "start_column": 24,
          "end_column": 39
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/9/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 8,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/8",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/8",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/incomplete-sanitization",
        "severity": "warning",
        "description": "Incomplete string escaping or encoding",
        "name": "js/incomplete-sanitization",
        "tags": [
          "correctness",
          "external/cwe/cwe-020",
          "external/cwe/cwe-080",
          "external/cwe/cwe-116",
          "security"
        ],
        "full_description": "A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.",
        "help": "# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This replaces only the first occurrence of /\"|'|;|and|or/i."
        },
        "location": {
          "path": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
          "start_line": 5,
          "end_line": 5,
          "start_column": 5,
          "end_column": 21
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/8/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 7,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/7",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/7",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/incomplete-url-substring-sanitization",
        "severity": "warning",
        "description": "Incomplete URL substring sanitization",
        "name": "js/incomplete-url-substring-sanitization",
        "tags": [
          "correctness",
          "external/cwe/cwe-020",
          "security"
        ],
        "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
        "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "'://htmledit.squarefree.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."
        },
        "location": {
          "path": "routes/updateUserProfile.ts",
          "start_line": 32,
          "end_line": 32,
          "start_column": 12,
          "end_column": 71
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/7/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 6,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/6",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/6",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/incomplete-url-substring-sanitization",
        "severity": "warning",
        "description": "Incomplete URL substring sanitization",
        "name": "js/incomplete-url-substring-sanitization",
        "tags": [
          "correctness",
          "external/cwe/cwe-020",
          "security"
        ],
        "full_description": "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
        "help": "# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "'://htmledit.squarefree.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."
        },
        "location": {
          "path": "routes/updateUserProfile.ts",
          "start_line": 31,
          "end_line": 31,
          "start_column": 18,
          "end_column": 76
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/6/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 5,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/5",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/5",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/code-injection",
        "severity": "error",
        "description": "Code injection",
        "name": "js/code-injection",
        "tags": [
          "external/cwe/cwe-079",
          "external/cwe/cwe-094",
          "external/cwe/cwe-095",
          "external/cwe/cwe-116",
          "security"
        ],
        "full_description": "Interpreting unsanitized user input as code allows a malicious user arbitrary code execution.",
        "help": "# Code injection\nDirectly evaluating user input (for example, an HTTP request parameter) as code without properly sanitizing the input first allows an attacker arbitrary code execution. This can occur when user input is treated as JavaScript, or passed to a framework which interprets it as an expression to be evaluated. Examples include AngularJS expressions or JQuery selectors.\n\n\n## Recommendation\nAvoid including user input in any expression which may be dynamically evaluated. If user input must be included, use context-specific escaping before including it. It is important that the correct escaping is used for the type of evaluation that will occur.\n\n\n## Example\nThe following example shows part of the page URL being evaluated as JavaScript code. This allows an attacker to provide JavaScript within the URL. If an attacker can persuade a user to click on a link to such a URL, the attacker can evaluate arbitrary JavaScript in the browser of the user to, for example, steal cookies containing session information.\n\n\n```javascript\neval(document.location.href.substring(document.location.href.indexOf(\"default=\")+8))\n\n```\nThe following example shows a Pug template being constructed from user input, allowing attackers to run arbitrary code via a payload such as `#{global.process.exit(1)}`.\n\n\n```javascript\nconst express = require('express')\nvar pug = require('pug');\nconst app = express()\n\napp.post('/', (req, res) => {\n    var input = req.query.username;\n    var template = `\ndoctype\nhtml\nhead\n    title= 'Hello world'\nbody\n    form(action='/' method='post')\n        input#name.form-control(type='text)\n        button.btn.btn-primary(type='submit') Submit\n    p Hello `+ input\n    var fn = pug.compile(template);\n    var html = fn();\n    res.send(html);\n})\n\n```\nBelow is an example of how to use a template engine without any risk of template injection. The user input is included via an interpolation expression `#{username}` whose value is provided as an option to the template, instead of being part of the template string itself:\n\n\n```javascript\nconst express = require('express')\nvar pug = require('pug');\nconst app = express()\n\napp.post('/', (req, res) => {\n    var input = req.query.username;\n    var template = `\ndoctype\nhtml\nhead\n    title= 'Hello world'\nbody\n    form(action='/' method='post')\n        input#name.form-control(type='text)\n        button.btn.btn-primary(type='submit') Submit\n    p Hello #{username}`\n    var fn = pug.compile(template);\n    var html = fn({username: input});\n    res.send(html);\n})\n\n```\n\n## References\n* OWASP: [Code Injection](https://www.owasp.org/index.php/Code_Injection).\n* Wikipedia: [Code Injection](https://en.wikipedia.org/wiki/Code_injection).\n* PortSwigger Research Blog: [Server-Side Template Injection](https://portswigger.net/research/server-side-template-injection).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n* Common Weakness Enumeration: [CWE-95](https://cwe.mitre.org/data/definitions/95.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This code execution depends on a user-provided value.\nThis code execution depends on a user-provided value."
        },
        "location": {
          "path": "routes/trackOrder.ts",
          "start_line": 18,
          "end_line": 18,
          "start_column": 40,
          "end_column": 66
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/5/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 4,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/4",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/4",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/code-injection",
        "severity": "error",
        "description": "Code injection",
        "name": "js/code-injection",
        "tags": [
          "external/cwe/cwe-079",
          "external/cwe/cwe-094",
          "external/cwe/cwe-095",
          "external/cwe/cwe-116",
          "security"
        ],
        "full_description": "Interpreting unsanitized user input as code allows a malicious user arbitrary code execution.",
        "help": "# Code injection\nDirectly evaluating user input (for example, an HTTP request parameter) as code without properly sanitizing the input first allows an attacker arbitrary code execution. This can occur when user input is treated as JavaScript, or passed to a framework which interprets it as an expression to be evaluated. Examples include AngularJS expressions or JQuery selectors.\n\n\n## Recommendation\nAvoid including user input in any expression which may be dynamically evaluated. If user input must be included, use context-specific escaping before including it. It is important that the correct escaping is used for the type of evaluation that will occur.\n\n\n## Example\nThe following example shows part of the page URL being evaluated as JavaScript code. This allows an attacker to provide JavaScript within the URL. If an attacker can persuade a user to click on a link to such a URL, the attacker can evaluate arbitrary JavaScript in the browser of the user to, for example, steal cookies containing session information.\n\n\n```javascript\neval(document.location.href.substring(document.location.href.indexOf(\"default=\")+8))\n\n```\nThe following example shows a Pug template being constructed from user input, allowing attackers to run arbitrary code via a payload such as `#{global.process.exit(1)}`.\n\n\n```javascript\nconst express = require('express')\nvar pug = require('pug');\nconst app = express()\n\napp.post('/', (req, res) => {\n    var input = req.query.username;\n    var template = `\ndoctype\nhtml\nhead\n    title= 'Hello world'\nbody\n    form(action='/' method='post')\n        input#name.form-control(type='text)\n        button.btn.btn-primary(type='submit') Submit\n    p Hello `+ input\n    var fn = pug.compile(template);\n    var html = fn();\n    res.send(html);\n})\n\n```\nBelow is an example of how to use a template engine without any risk of template injection. The user input is included via an interpolation expression `#{username}` whose value is provided as an option to the template, instead of being part of the template string itself:\n\n\n```javascript\nconst express = require('express')\nvar pug = require('pug');\nconst app = express()\n\napp.post('/', (req, res) => {\n    var input = req.query.username;\n    var template = `\ndoctype\nhtml\nhead\n    title= 'Hello world'\nbody\n    form(action='/' method='post')\n        input#name.form-control(type='text)\n        button.btn.btn-primary(type='submit') Submit\n    p Hello #{username}`\n    var fn = pug.compile(template);\n    var html = fn({username: input});\n    res.send(html);\n})\n\n```\n\n## References\n* OWASP: [Code Injection](https://www.owasp.org/index.php/Code_Injection).\n* Wikipedia: [Code Injection](https://en.wikipedia.org/wiki/Code_injection).\n* PortSwigger Research Blog: [Server-Side Template Injection](https://portswigger.net/research/server-side-template-injection).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n* Common Weakness Enumeration: [CWE-95](https://cwe.mitre.org/data/definitions/95.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This code execution depends on a user-provided value."
        },
        "location": {
          "path": "routes/showProductReviews.ts",
          "start_line": 36,
          "end_line": 36,
          "start_column": 41,
          "end_column": 64
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/4/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 3,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/3",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/3",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/type-confusion-through-parameter-tampering",
        "severity": "error",
        "description": "Type confusion through parameter tampering",
        "name": "js/type-confusion-through-parameter-tampering",
        "tags": [
          "external/cwe/cwe-843",
          "security"
        ],
        "full_description": "Sanitizing an HTTP request parameter may be ineffective if the user controls its type.",
        "help": "# Type confusion through parameter tampering\nSanitizing untrusted HTTP request parameters is a common technique for preventing injection attacks such as SQL injection or path traversal. This is sometimes done by checking if the request parameters contain blacklisted substrings.\n\nHowever, sanitizing request parameters assuming they have type `String` and using the builtin string methods such as `String.prototype.indexOf` is susceptible to type confusion attacks. In a type confusion attack, an attacker tampers with an HTTP request parameter such that it has a value of type `Array` instead of the expected type `String`. Furthermore, the content of the array has been crafted to bypass sanitizers by exploiting that some identically named methods of strings and arrays behave differently.\n\n\n## Recommendation\nCheck the runtime type of sanitizer inputs if the input type is user-controlled.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\n\n## Example\nFor example, Node.js server frameworks usually present request parameters as strings. But if an attacker sends multiple request parameters with the same name, then the request parameter is represented as an array instead.\n\nIn the following example, a sanitizer checks that a path does not contain the `\"..\"` string, which would allow an attacker to access content outside a user-accessible directory.\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (file.indexOf(\"..\") !== -1) {\n    // BAD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\nAs written, this sanitizer is ineffective: an array like `[\"../\", \"/../secret.txt\"]` will bypass the sanitizer. The array does not contain `\"..\"` as an element, so the call to `indexOf` returns `-1` . This is problematic since the value of the `absolute` variable then ends up being `\"/secret.txt\"`. This happens since the concatenation of `\"/public/\"` and the array results in `\"/public/../,/../secret.txt\"`, which the `resolve`-call converts to `\"/secret.txt\"`.\n\nTo fix the sanitizer, check that the request parameter is a string, and not an array:\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (typeof file !== 'string' || file.indexOf(\"..\") !== -1) {\n    // GOOD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\n\n## References\n* Node.js API: [querystring](https://nodejs.org/api/querystring.html).\n* Common Weakness Enumeration: [CWE-843](https://cwe.mitre.org/data/definitions/843.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Potential type confusion as this HTTP request parameter may be either an array or a string."
        },
        "location": {
          "path": "routes/search.ts",
          "start_line": 22,
          "end_line": 22,
          "start_column": 17,
          "end_column": 25
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/3/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 2,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/2",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/2",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/type-confusion-through-parameter-tampering",
        "severity": "error",
        "description": "Type confusion through parameter tampering",
        "name": "js/type-confusion-through-parameter-tampering",
        "tags": [
          "external/cwe/cwe-843",
          "security"
        ],
        "full_description": "Sanitizing an HTTP request parameter may be ineffective if the user controls its type.",
        "help": "# Type confusion through parameter tampering\nSanitizing untrusted HTTP request parameters is a common technique for preventing injection attacks such as SQL injection or path traversal. This is sometimes done by checking if the request parameters contain blacklisted substrings.\n\nHowever, sanitizing request parameters assuming they have type `String` and using the builtin string methods such as `String.prototype.indexOf` is susceptible to type confusion attacks. In a type confusion attack, an attacker tampers with an HTTP request parameter such that it has a value of type `Array` instead of the expected type `String`. Furthermore, the content of the array has been crafted to bypass sanitizers by exploiting that some identically named methods of strings and arrays behave differently.\n\n\n## Recommendation\nCheck the runtime type of sanitizer inputs if the input type is user-controlled.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\n\n## Example\nFor example, Node.js server frameworks usually present request parameters as strings. But if an attacker sends multiple request parameters with the same name, then the request parameter is represented as an array instead.\n\nIn the following example, a sanitizer checks that a path does not contain the `\"..\"` string, which would allow an attacker to access content outside a user-accessible directory.\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (file.indexOf(\"..\") !== -1) {\n    // BAD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\nAs written, this sanitizer is ineffective: an array like `[\"../\", \"/../secret.txt\"]` will bypass the sanitizer. The array does not contain `\"..\"` as an element, so the call to `indexOf` returns `-1` . This is problematic since the value of the `absolute` variable then ends up being `\"/secret.txt\"`. This happens since the concatenation of `\"/public/\"` and the array results in `\"/public/../,/../secret.txt\"`, which the `resolve`-call converts to `\"/secret.txt\"`.\n\nTo fix the sanitizer, check that the request parameter is a string, and not an array:\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (typeof file !== 'string' || file.indexOf(\"..\") !== -1) {\n    // GOOD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\n\n## References\n* Node.js API: [querystring](https://nodejs.org/api/querystring.html).\n* Common Weakness Enumeration: [CWE-843](https://cwe.mitre.org/data/definitions/843.html).\n",
        "security_severity_level": "critical"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "Potential type confusion as this HTTP request parameter may be either an array or a string."
        },
        "location": {
          "path": "lib/insecurity.ts",
          "start_line": 138,
          "end_line": 138,
          "start_column": 26,
          "end_column": 29
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/2/instances",
      "dismissal_approved_by": null
    },
    {
      "number": 1,
      "created_at": "2025-06-17T09:21:27Z",
      "updated_at": "2025-06-17T17:34:53Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/1",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/code-scanning/1",
      "state": "open",
      "fixed_at": null,
      "dismissed_by": null,
      "dismissed_at": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "rule": {
        "id": "js/polynomial-redos",
        "severity": "warning",
        "description": "Polynomial regular expression used on uncontrolled data",
        "name": "js/polynomial-redos",
        "tags": [
          "external/cwe/cwe-1333",
          "external/cwe/cwe-400",
          "external/cwe/cwe-730",
          "security"
        ],
        "full_description": "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks.",
        "help": "# Polynomial regular expression used on uncontrolled data\nSome regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service (\"DoS\") attack by crafting an expensive input string for the regular expression to match.\n\nThe regular expression engines provided by many popular JavaScript platforms use backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.\n\nTypically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.\n\n\n## Recommendation\nModify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter.\n\n\n## Example\nConsider this use of a regular expression, which removes all leading and trailing whitespace in a string:\n\n```javascript\n\ntext.replace(/^\\s+|\\s+$/g, ''); // BAD\n```\nThe sub-expression `\"\\s+$\"` will match the whitespace characters in `text` from left to right, but it can start matching anywhere within a whitespace sequence. This is problematic for strings that do **not** end with a whitespace character. Such a string will force the regular expression engine to process each whitespace sequence once per whitespace character in the sequence.\n\nThis ultimately means that the time cost of trimming a string is quadratic in the length of the string. So a string like `\"a b\"` will take milliseconds to process, but a similar string with a million spaces instead of just one will take several minutes.\n\nAvoid this problem by rewriting the regular expression to not contain the ambiguity about when to start matching whitespace sequences. For instance, by using a negative look-behind (`/^\\s+|(?<!\\s)\\s+$/g`), or just by using the built-in trim method (`text.trim()`).\n\nNote that the sub-expression `\"^\\s+\"` is **not** problematic as the `^` anchor restricts when that sub-expression can start matching, and as the regular expression engine matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler problem, consider the regular expression that matches lines with numbers, possibly written using scientific notation:\n\n```javascript\n\n/^0\\.\\d+E?\\d+$/.test(str) // BAD\n```\nThe problem with this regular expression is in the sub-expression `\\d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the first match of the first `\\d+` if there is no `E` in the input string.\n\nThis is problematic for strings that do **not** end with a digit. Such a string will force the regular expression engine to process each digit sequence once per digit in the sequence, again leading to a quadratic time complexity.\n\nTo make the processing faster, the regular expression should be rewritten such that the two `\\d+` sub-expressions do not have overlapping matches: `^0\\.\\d+(E\\d+)?$`.\n\n\n## Example\nSometimes it is unclear how a regular expression can be rewritten to avoid the problem. In such cases, it often suffices to limit the length of the input string. For instance, the following regular expression is used to match numbers, and on some non-number inputs it can have quadratic time complexity:\n\n```javascript\n\n/^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/.test(str) // BAD\n```\nIt is not immediately obvious how to rewrite this regular expression to avoid the problem. However, you can mitigate performance issues by limiting the length to 1000 characters, which will always finish in a reasonable amount of time.\n\n```javascript\n\nif (str.length > 1000) {\n    throw new Error(\"Input too long\");\n}\n\n/^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/.test(str)\n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
        "security_severity_level": "high"
      },
      "tool": {
        "name": "CodeQL",
        "guid": null,
        "version": "2.22.0"
      },
      "most_recent_instance": {
        "ref": "refs/heads/master",
        "analysis_key": ".github/workflows/GHAS.yml:codeql",
        "environment": "{}",
        "category": ".github/workflows/GHAS.yml:codeql",
        "state": "open",
        "commit_sha": "3ccc40d287e4f548eceb284d047e72cfa92f9e11",
        "message": {
          "text": "This regular expression that depends on a user-provided value may run slow on strings with many repetitions of 'a'."
        },
        "location": {
          "path": "routes/profileImageUrlUpload.ts",
          "start_line": 20,
          "end_line": 20,
          "start_column": 11,
          "end_column": 62
        },
        "classifications": []
      },
      "instances_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/code-scanning/alerts/1/instances",
      "dismissal_approved_by": null
    }
  ],
  "secret_scanning": [
    {
      "number": 34,
      "created_at": "2025-06-18T10:10:04Z",
      "updated_at": "2025-06-18T11:13:39Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/secret-scanning/alerts/34",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/secret-scanning/34",
      "locations_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/secret-scanning/alerts/34/locations",
      "state": "open",
      "secret_type": "google_api_key",
      "secret_type_display_name": "Google API Key",
      "validity": "inactive",
      "multi_repo": false,
      "is_base64_encoded": false,
      "secret": "AIzaSyDaGmWKa4JsXZ-HjGw8ISLn_3namBGewQe",
      "first_location_detected": {
        "path": "REFERENCES.md",
        "start_line": 15,
        "end_line": 15,
        "start_column": 1,
        "end_column": 40,
        "blob_sha": "867d3e792958f7b4b89e9966398f8c1a26082dfa",
        "blob_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/git/blobs/867d3e792958f7b4b89e9966398f8c1a26082dfa",
        "commit_sha": "a4027a84342c902a902cf37d9c2984e62b51b7d6",
        "commit_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/git/commits/a4027a84342c902a902cf37d9c2984e62b51b7d6"
      },
      "has_more_locations": true,
      "publicly_leaked": true,
      "resolution": null,
      "resolved_by": null,
      "resolved_at": null,
      "resolution_comment": "testing",
      "push_protection_bypassed": false,
      "push_protection_bypassed_by": null,
      "push_protection_bypassed_at": null,
      "push_protection_bypass_request_reviewer": null,
      "push_protection_bypass_request_reviewer_comment": null,
      "push_protection_bypass_request_comment": null,
      "push_protection_bypass_request_html_url": null
    },
    {
      "number": 10,
      "created_at": "2025-06-17T10:01:45Z",
      "updated_at": "2025-06-17T12:37:16Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/secret-scanning/alerts/10",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/secret-scanning/10",
      "locations_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/secret-scanning/alerts/10/locations",
      "state": "open",
      "secret_type": "github_personal_access_token",
      "secret_type_display_name": "GitHub Personal Access Token",
      "validity": "unknown",
      "multi_repo": true,
      "is_base64_encoded": false,
      "secret": "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",
      "first_location_detected": {
        "path": "README.md",
        "start_line": 41,
        "end_line": 41,
        "start_column": 1,
        "end_column": 41,
        "blob_sha": "3ec90d253eb8440e12ed45d005deb90007322ae6",
        "blob_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/git/blobs/3ec90d253eb8440e12ed45d005deb90007322ae6",
        "commit_sha": "0284f31dbc6c75dac9becce4f1f9dde8f77ab1fc",
        "commit_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/git/commits/0284f31dbc6c75dac9becce4f1f9dde8f77ab1fc"
      },
      "has_more_locations": true,
      "publicly_leaked": true,
      "resolution": null,
      "resolved_by": null,
      "resolved_at": null,
      "resolution_comment": null,
      "push_protection_bypassed": true,
      "push_protection_bypassed_by": {
        "login": "Sec-champ",
        "id": 203533934,
        "node_id": "U_kgDODCGubg",
        "avatar_url": "https://avatars.githubusercontent.com/u/203533934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sec-champ",
        "html_url": "https://github.com/Sec-champ",
        "followers_url": "https://api.github.com/users/Sec-champ/followers",
        "following_url": "https://api.github.com/users/Sec-champ/following{/other_user}",
        "gists_url": "https://api.github.com/users/Sec-champ/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Sec-champ/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Sec-champ/subscriptions",
        "organizations_url": "https://api.github.com/users/Sec-champ/orgs",
        "repos_url": "https://api.github.com/users/Sec-champ/repos",
        "events_url": "https://api.github.com/users/Sec-champ/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Sec-champ/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "push_protection_bypassed_at": "2025-06-17T10:01:26Z",
      "push_protection_bypass_request_reviewer": null,
      "push_protection_bypass_request_reviewer_comment": null,
      "push_protection_bypass_request_comment": null,
      "push_protection_bypass_request_html_url": null
    },
    {
      "number": 9,
      "created_at": "2025-06-17T10:01:45Z",
      "updated_at": "2025-06-18T04:21:30Z",
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/secret-scanning/alerts/9",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/secret-scanning/9",
      "locations_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/secret-scanning/alerts/9/locations",
      "state": "open",
      "secret_type": "google_api_key",
      "secret_type_display_name": "Google API Key",
      "validity": "inactive",
      "multi_repo": true,
      "is_base64_encoded": false,
      "secret": "AIzaSyDaGmWKa4JsXZ-HjGw7ISLn_3namBGewQe",
      "first_location_detected": {
        "path": "README.md",
        "start_line": 39,
        "end_line": 39,
        "start_column": 9,
        "end_column": 48,
        "blob_sha": "3ec90d253eb8440e12ed45d005deb90007322ae6",
        "blob_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/git/blobs/3ec90d253eb8440e12ed45d005deb90007322ae6",
        "commit_sha": "0284f31dbc6c75dac9becce4f1f9dde8f77ab1fc",
        "commit_url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/git/commits/0284f31dbc6c75dac9becce4f1f9dde8f77ab1fc"
      },
      "has_more_locations": true,
      "publicly_leaked": true,
      "resolution": null,
      "resolved_by": null,
      "resolved_at": null,
      "resolution_comment": null,
      "push_protection_bypassed": false,
      "push_protection_bypassed_by": null,
      "push_protection_bypassed_at": null,
      "push_protection_bypass_request_reviewer": null,
      "push_protection_bypass_request_reviewer_comment": null,
      "push_protection_bypass_request_comment": null,
      "push_protection_bypass_request_html_url": null
    }
  ],
  "dependabot": [
    {
      "number": 16,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-g5hg-p3ph-g8qg",
        "cve_id": "CVE-2025-48997",
        "summary": "Multer vulnerable to Denial of Service via unhandled exception",
        "description": "### Impact\n\nA vulnerability in Multer versions >=1.4.4-lts.1, <2.0.1 allows an attacker to trigger a Denial of Service (DoS) by sending an upload file request with an empty string field name. This request causes an unhandled exception, leading to a crash of the process.\n\n### Patches\n\nUsers should upgrade to `2.0.1`\n\n### Workarounds\n\nNone\n\n### References\n\nhttps://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9\nhttps://github.com/expressjs/multer/issues/1233\nhttps://github.com/expressjs/multer/pull/1256",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-g5hg-p3ph-g8qg",
            "type": "GHSA"
          },
          {
            "value": "CVE-2025-48997",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/expressjs/multer/security/advisories/GHSA-g5hg-p3ph-g8qg"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-48997"
          },
          {
            "url": "https://github.com/expressjs/multer/issues/1233"
          },
          {
            "url": "https://github.com/expressjs/multer/pull/1256"
          },
          {
            "url": "https://github.com/expressjs/multer/commit/35a3272b611945155e046dd5cef11088587635e9"
          },
          {
            "url": "https://github.com/advisories/GHSA-g5hg-p3ph-g8qg"
          }
        ],
        "published_at": "2025-06-05T01:09:35Z",
        "updated_at": "2025-06-05T01:09:36Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "multer"
            },
            "severity": "high",
            "vulnerable_version_range": ">= 1.4.4-lts.1, < 2.0.1",
            "first_patched_version": {
              "identifier": "2.0.1"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": null,
            "score": 0.0
          },
          "cvss_v4": {
            "vector_string": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N",
            "score": 8.7
          }
        },
        "epss": {
          "percentage": 0.00055,
          "percentile": 0.17446
        },
        "cvss": {
          "vector_string": null,
          "score": 0.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-248",
            "name": "Uncaught Exception"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "severity": "high",
        "vulnerable_version_range": ">= 1.4.4-lts.1, < 2.0.1",
        "first_patched_version": {
          "identifier": "2.0.1"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/16",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/16",
      "created_at": "2025-06-17T09:20:50Z",
      "updated_at": "2025-06-17T09:20:50Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 15,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-4pg4-qvpc-4q3h",
        "cve_id": "CVE-2025-47944",
        "summary": "Multer vulnerable to Denial of Service from maliciously crafted requests",
        "description": "### Impact\nA vulnerability in Multer versions >=1.4.4-lts.1 allows an attacker to trigger a Denial of Service (DoS) by sending a malformed multi-part upload request. This request causes an unhandled exception, leading to a crash of the process.\n\n### Patches\nUsers should upgrade to `2.0.0`\n\n### Workarounds\nNone\n\n### References\n\n- https://github.com/expressjs/multer/issues/1176\n- https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-4pg4-qvpc-4q3h",
            "type": "GHSA"
          },
          {
            "value": "CVE-2025-47944",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/expressjs/multer/security/advisories/GHSA-4pg4-qvpc-4q3h"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-47944"
          },
          {
            "url": "https://github.com/expressjs/multer/issues/1176"
          },
          {
            "url": "https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665"
          },
          {
            "url": "https://github.com/advisories/GHSA-4pg4-qvpc-4q3h"
          }
        ],
        "published_at": "2025-05-19T22:16:30Z",
        "updated_at": "2025-05-21T20:37:35Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "multer"
            },
            "severity": "high",
            "vulnerable_version_range": ">= 1.4.4-lts.1, < 2.0.0",
            "first_patched_version": {
              "identifier": "2.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "score": 7.5
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00049,
          "percentile": 0.15354
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "score": 7.5
        },
        "cwes": [
          {
            "cwe_id": "CWE-248",
            "name": "Uncaught Exception"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "severity": "high",
        "vulnerable_version_range": ">= 1.4.4-lts.1, < 2.0.0",
        "first_patched_version": {
          "identifier": "2.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/15",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/15",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 14,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-44fp-w29j-9vj5",
        "cve_id": "CVE-2025-47935",
        "summary": "Multer vulnerable to Denial of Service via memory leaks from unclosed streams",
        "description": "### Impact\n\nMulter <2.0.0 is vulnerable to a resource exhaustion and memory leak issue due to improper stream handling. When the HTTP request stream emits an error, the internal `busboy` stream is not closed, violating Node.js stream safety guidance.\n\nThis leads to unclosed streams accumulating over time, consuming memory and file descriptors. Under sustained or repeated failure conditions, this can result in denial of service, requiring manual server restarts to recover. All users of Multer handling file uploads are potentially impacted.\n\n\n### Patches\n\nUsers should upgrade to `2.0.0`\n\n\n### Workarounds\n\nNone\n\n### References\n\n- https://github.com/expressjs/multer/pull/1120\n- https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-44fp-w29j-9vj5",
            "type": "GHSA"
          },
          {
            "value": "CVE-2025-47935",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/expressjs/multer/security/advisories/GHSA-44fp-w29j-9vj5"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-47935"
          },
          {
            "url": "https://github.com/expressjs/multer/pull/1120"
          },
          {
            "url": "https://github.com/expressjs/multer/commit/2c8505f207d923dd8de13a9f93a4563e59933665"
          },
          {
            "url": "https://github.com/advisories/GHSA-44fp-w29j-9vj5"
          }
        ],
        "published_at": "2025-05-19T22:04:17Z",
        "updated_at": "2025-06-08T07:19:19Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "multer"
            },
            "severity": "high",
            "vulnerable_version_range": "< 2.0.0",
            "first_patched_version": {
              "identifier": "2.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "score": 7.5
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00049,
          "percentile": 0.15354
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "score": 7.5
        },
        "cwes": [
          {
            "cwe_id": "CWE-401",
            "name": "Missing Release of Memory after Effective Lifetime"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "multer"
        },
        "severity": "high",
        "vulnerable_version_range": "< 2.0.0",
        "first_patched_version": {
          "identifier": "2.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/14",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/14",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 13,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "socket.io"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-25hc-qcg6-38wj",
        "cve_id": "CVE-2024-38355",
        "summary": "socket.io has an unhandled 'error' event",
        "description": "### Impact\n\nA specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process.\n\n```\nnode:events:502\n    throw err; // Unhandled 'error' event\n    ^\n\nError [ERR_UNHANDLED_ERROR]: Unhandled error. (undefined)\n    at new NodeError (node:internal/errors:405:5)\n    at Socket.emit (node:events:500:17)\n    at /myapp/node_modules/socket.io/lib/socket.js:531:14\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {\n  code: 'ERR_UNHANDLED_ERROR',\n  context: undefined\n}\n```\n\n### Affected versions\n\n| Version range    | Needs minor update?                            |\n|------------------|------------------------------------------------|\n| `4.6.2...latest` | Nothing to do               |\n| `3.0.0...4.6.1`  | Please upgrade to `socket.io@4.6.2` (at least) |\n| `2.3.0...2.5.0`  | Please upgrade to `socket.io@2.5.1`            |\n\n### Patches\n\nThis issue is fixed by https://github.com/socketio/socket.io/commit/15af22fc22bc6030fcead322c106f07640336115, included in `socket.io@4.6.2` (released in May 2023).\n\nThe fix was backported in the 2.x branch today: https://github.com/socketio/socket.io/commit/d30630ba10562bf987f4d2b42440fc41a828119c\n\n### Workarounds\n\nAs a workaround for the affected versions of the `socket.io` package, you can attach a listener for the \"error\" event:\n\n```js\nio.on(\"connection\", (socket) => {\n  socket.on(\"error\", () => {\n    // ...\n  });\n});\n```\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open a discussion [here](https://github.com/socketio/socket.io/discussions)\n\nThanks a lot to [Paul Taylor](https://github.com/Y0ursTruly) for the responsible disclosure.\n\n### References\n\n- https://github.com/socketio/socket.io/commit/15af22fc22bc6030fcead322c106f07640336115\n- https://github.com/socketio/socket.io/commit/d30630ba10562bf987f4d2b42440fc41a828119c\n",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-25hc-qcg6-38wj",
            "type": "GHSA"
          },
          {
            "value": "CVE-2024-38355",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/socketio/socket.io/security/advisories/GHSA-25hc-qcg6-38wj"
          },
          {
            "url": "https://github.com/socketio/socket.io/commit/15af22fc22bc6030fcead322c106f07640336115"
          },
          {
            "url": "https://github.com/socketio/socket.io/commit/d30630ba10562bf987f4d2b42440fc41a828119c"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-38355"
          },
          {
            "url": "https://github.com/advisories/GHSA-25hc-qcg6-38wj"
          }
        ],
        "published_at": "2024-06-19T15:04:41Z",
        "updated_at": "2024-11-18T16:26:46Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "socket.io"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.5.0",
            "first_patched_version": {
              "identifier": "2.5.1"
            }
          },
          {
            "package": {
              "ecosystem": "npm",
              "name": "socket.io"
            },
            "severity": "medium",
            "vulnerable_version_range": ">= 3.0.0, < 4.6.2",
            "first_patched_version": {
              "identifier": "4.6.2"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "score": 7.3
          },
          "cvss_v4": {
            "vector_string": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:L/VI:L/VA:L/SC:N/SI:N/SA:N",
            "score": 6.9
          }
        },
        "epss": {
          "percentage": 0.00099,
          "percentile": 0.28552
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "score": 7.3
        },
        "cwes": [
          {
            "cwe_id": "CWE-20",
            "name": "Improper Input Validation"
          },
          {
            "cwe_id": "CWE-754",
            "name": "Improper Check for Unusual or Exceptional Conditions"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "socket.io"
        },
        "severity": "medium",
        "vulnerable_version_range": ">= 3.0.0, < 4.6.2",
        "first_patched_version": {
          "identifier": "4.6.2"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/13",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/13",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 12,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-cgfm-xwp7-2cvr",
        "cve_id": "CVE-2022-25887",
        "summary": "Sanitize-html Vulnerable To REDoS Attacks",
        "description": "The package sanitize-html before 2.7.1 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal.",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-cgfm-xwp7-2cvr",
            "type": "GHSA"
          },
          {
            "value": "CVE-2022-25887",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-25887"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/pull/557"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/commit/b4682c12fd30e12e82fa2d9b766de91d7d2cd23c"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3008102"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-2957526"
          },
          {
            "url": "https://github.com/advisories/GHSA-cgfm-xwp7-2cvr"
          }
        ],
        "published_at": "2022-08-31T00:00:24Z",
        "updated_at": "2024-04-22T23:16:47Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "high",
            "vulnerable_version_range": "< 2.7.1",
            "first_patched_version": {
              "identifier": "2.7.1"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "score": 7.5
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00048,
          "percentile": 0.14691
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "score": 7.5
        },
        "cwes": [
          {
            "cwe_id": "CWE-1333",
            "name": "Inefficient Regular Expression Complexity"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "high",
        "vulnerable_version_range": "< 2.7.1",
        "first_patched_version": {
          "identifier": "2.7.1"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/12",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/12",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 11,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-rm97-x556-q36h",
        "cve_id": "CVE-2024-21501",
        "summary": "sanitize-html Information Exposure vulnerability",
        "description": "Versions of the package sanitize-html before 2.12.1 are vulnerable to Information Exposure when used on the backend and with the style attribute allowed, allowing enumeration of files in the system (including project dependencies). An attacker could exploit this vulnerability to gather details about the file system structure and dependencies of the targeted server.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-rm97-x556-q36h",
            "type": "GHSA"
          },
          {
            "value": "CVE-2024-21501",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-21501"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/pull/650"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/commit/c5dbdf77fe8b836d3bf4554ea39edb45281ec0b4"
          },
          {
            "url": "https://gist.github.com/Slonser/8b4d061abe6ee1b2e10c7242987674cf"
          },
          {
            "url": "https://github.com/apostrophecms/apostrophe/discussions/4436"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-6256334"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-6276557"
          },
          {
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4EB5JPYRCTS64EA5AMV3INHDPI6I4AW7"
          },
          {
            "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/P4I5X6V3LYUNBMZ5YOW4BV427TH3IK4S"
          },
          {
            "url": "https://github.com/advisories/GHSA-rm97-x556-q36h"
          }
        ],
        "published_at": "2024-02-24T06:30:17Z",
        "updated_at": "2024-08-28T21:58:19Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.12.1",
            "first_patched_version": {
              "identifier": "2.12.1"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "score": 5.3
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00991,
          "percentile": 0.75692
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
          "score": 5.3
        },
        "cwes": [
          {
            "cwe_id": "CWE-200",
            "name": "Exposure of Sensitive Information to an Unauthorized Actor"
          },
          {
            "cwe_id": "CWE-538",
            "name": "Insertion of Sensitive Information into Externally-Accessible File or Directory"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 2.12.1",
        "first_patched_version": {
          "identifier": "2.12.1"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/11",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/11",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 10,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-qwph-4952-7xr6",
        "cve_id": "CVE-2022-23540",
        "summary": "jsonwebtoken vulnerable to signature validation bypass due to insecure default algorithm in jwt.verify()",
        "description": "# Overview\n\nIn versions <=8.5.1 of jsonwebtoken library, lack of algorithm definition and a falsy secret or key in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification.\n\n# Am I affected?\nYou will be affected if all the following are true in the `jwt.verify()` function:\n- a token with no signature is received\n- no algorithms are specified \n- a falsy (e.g. null, false, undefined) secret or key is passed \n\n# How do I fix it?\n \nUpdate to version 9.0.0 which removes the default support for the none algorithm in the `jwt.verify()` method. \n\n# Will the fix impact my users?\n\nThere will be no impact, if you update to version 9.0.0 and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-qwph-4952-7xr6",
            "type": "GHSA"
          },
          {
            "value": "CVE-2022-23540",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-qwph-4952-7xr6"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-23540"
          },
          {
            "url": "https://security.netapp.com/advisory/ntap-20240621-0007"
          },
          {
            "url": "https://github.com/advisories/GHSA-qwph-4952-7xr6"
          }
        ],
        "published_at": "2022-12-22T03:32:59Z",
        "updated_at": "2025-02-13T18:33:13Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "jsonwebtoken"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 9.0.0",
            "first_patched_version": {
              "identifier": "9.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:L",
            "score": 6.4
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00024,
          "percentile": 0.04833
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:L",
          "score": 6.4
        },
        "cwes": [
          {
            "cwe_id": "CWE-287",
            "name": "Improper Authentication"
          },
          {
            "cwe_id": "CWE-327",
            "name": "Use of a Broken or Risky Cryptographic Algorithm"
          },
          {
            "cwe_id": "CWE-347",
            "name": "Improper Verification of Cryptographic Signature"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 9.0.0",
        "first_patched_version": {
          "identifier": "9.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/10",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/10",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 9,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-hjrf-2m68-5959",
        "cve_id": "CVE-2022-23541",
        "summary": "jsonwebtoken's insecure implementation of key retrieval function could lead to Forgeable Public/Private Tokens from RSA to HMAC",
        "description": "# Overview\n\nVersions `<=8.5.1` of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function (referring to the `secretOrPublicKey` argument from the [readme link](https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback)) will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification  than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. \n\n# Am I affected?\n\nYou will be affected if your application is supporting usage of both symmetric key and asymmetric key in jwt.verify() implementation with the same key retrieval function. \n\n# How do I fix it?\n \nUpdate to version 9.0.0.\n\n# Will the fix impact my users?\n\nThere is no impact for end users",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-hjrf-2m68-5959",
            "type": "GHSA"
          },
          {
            "value": "CVE-2022-23541",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-hjrf-2m68-5959"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-23541"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0"
          },
          {
            "url": "https://security.netapp.com/advisory/ntap-20240621-0007"
          },
          {
            "url": "https://github.com/advisories/GHSA-hjrf-2m68-5959"
          }
        ],
        "published_at": "2022-12-22T03:33:19Z",
        "updated_at": "2024-06-24T21:24:07Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "jsonwebtoken"
            },
            "severity": "medium",
            "vulnerable_version_range": "<= 8.5.1",
            "first_patched_version": {
              "identifier": "9.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "score": 5.0
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00049,
          "percentile": 0.15032
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L",
          "score": 5.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-287",
            "name": "Improper Authentication"
          },
          {
            "cwe_id": "CWE-1259",
            "name": "Improper Restriction of Security Token Assignment"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "severity": "medium",
        "vulnerable_version_range": "<= 8.5.1",
        "first_patched_version": {
          "identifier": "9.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/9",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/9",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 8,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-8cf7-32gw-wr33",
        "cve_id": "CVE-2022-23539",
        "summary": "jsonwebtoken unrestricted key type could lead to legacy keys usage ",
        "description": "# Overview\n\nVersions `<=8.5.1` of `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. \n\n# Am I affected?\n\nYou are affected if you are using an algorithm and a key type other than the combinations mentioned below\n\n| Key type |  algorithm                                    |\n|----------|------------------------------------------|\n| ec           | ES256, ES384, ES512                      |\n| rsa          | RS256, RS384, RS512, PS256, PS384, PS512 |\n| rsa-pss  | PS256, PS384, PS512                      |\n\nAnd for Elliptic Curve algorithms:\n\n| `alg` | Curve      |\n|-------|------------|\n| ES256 | prime256v1 |\n| ES384 | secp384r1  |\n| ES512 | secp521r1  |\n\n# How do I fix it?\n\nUpdate to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, If you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option to `true` in the `sign()` and/or `verify()` functions.\n\n# Will the fix impact my users?\n\nThere will be no impact, if you update to version 9.0.0 and you already use a valid secure combination of key type and algorithm. Otherwise,  use the  `allowInvalidAsymmetricKeyTypes` option  to `true` in the `sign()` and `verify()` functions to continue usage of invalid key type/algorithm combination in 9.0.0 for legacy compatibility. \n\n",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-8cf7-32gw-wr33",
            "type": "GHSA"
          },
          {
            "value": "CVE-2022-23539",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-8cf7-32gw-wr33"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-23539"
          },
          {
            "url": "https://security.netapp.com/advisory/ntap-20240621-0007"
          },
          {
            "url": "https://github.com/advisories/GHSA-8cf7-32gw-wr33"
          }
        ],
        "published_at": "2022-12-22T03:32:22Z",
        "updated_at": "2024-06-24T21:23:39Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "jsonwebtoken"
            },
            "severity": "high",
            "vulnerable_version_range": "<= 8.5.1",
            "first_patched_version": {
              "identifier": "9.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
            "score": 8.1
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00089,
          "percentile": 0.26522
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
          "score": 8.1
        },
        "cwes": [
          {
            "cwe_id": "CWE-327",
            "name": "Use of a Broken or Risky Cryptographic Algorithm"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "severity": "high",
        "vulnerable_version_range": "<= 8.5.1",
        "first_patched_version": {
          "identifier": "9.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/8",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/8",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 7,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-rjqq-98f6-6j3r",
        "cve_id": "CVE-2021-26539",
        "summary": "Improper Input Validation in sanitize-html",
        "description": "Apostrophe Technologies sanitize-html before 2.3.1 does not properly handle internationalized domain name (IDN) which could allow an attacker to bypass hostname whitelist validation set by the \"allowedIframeHostnames\" option.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-rjqq-98f6-6j3r",
            "type": "GHSA"
          },
          {
            "value": "CVE-2021-26539",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-26539"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/pull/458"
          },
          {
            "url": "https://advisory.checkmarx.net/advisory/CX-2021-4308"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/blob/main/CHANGELOG.md#231-2021-01-22"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/commit/bdf7836ef8f0e5b21f9a1aab0623ae8fcd09c1da"
          },
          {
            "url": "https://github.com/advisories/GHSA-rjqq-98f6-6j3r"
          }
        ],
        "published_at": "2021-05-06T16:10:05Z",
        "updated_at": "2023-04-21T19:19:09Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.3.1",
            "first_patched_version": {
              "identifier": "2.3.1"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "score": 5.3
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00288,
          "percentile": 0.51774
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "score": 5.3
        },
        "cwes": [
          {
            "cwe_id": "CWE-20",
            "name": "Improper Input Validation"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 2.3.1",
        "first_patched_version": {
          "identifier": "2.3.1"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/7",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/7",
      "created_at": "2025-06-17T09:20:49Z",
      "updated_at": "2025-06-17T09:20:49Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 6,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-mjxr-4v3x-q3m4",
        "cve_id": "CVE-2021-26540",
        "summary": "Improper Input Validation in sanitize-html",
        "description": "Apostrophe Technologies sanitize-html before 2.3.2 does not properly validate the hostnames set by the \"allowedIframeHostnames\" option when the \"allowIframeRelativeUrls\" is set to true, which allows attackers to bypass hostname whitelist for iframe element, related using an src value that starts with \"/\\\\example.com\".",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-mjxr-4v3x-q3m4",
            "type": "GHSA"
          },
          {
            "value": "CVE-2021-26540",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-26540"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/pull/460"
          },
          {
            "url": "https://advisory.checkmarx.net/advisory/CX-2021-4309"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/blob/main/CHANGELOG.md#232-2021-01-26"
          },
          {
            "url": "https://github.com/advisories/GHSA-mjxr-4v3x-q3m4"
          }
        ],
        "published_at": "2021-05-06T16:10:19Z",
        "updated_at": "2023-02-01T05:05:21Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.3.2",
            "first_patched_version": {
              "identifier": "2.3.2"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "score": 5.3
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00288,
          "percentile": 0.51731
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "score": 5.3
        },
        "cwes": [
          {
            "cwe_id": "CWE-20",
            "name": "Improper Input Validation"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 2.3.2",
        "first_patched_version": {
          "identifier": "2.3.2"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/6",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/6",
      "created_at": "2025-06-17T09:20:48Z",
      "updated_at": "2025-06-17T09:20:48Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 5,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "marsdb"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-5mrr-rgp6-x4gr",
        "cve_id": null,
        "summary": "Command Injection in marsdb",
        "description": "All versions of `marsdb` are vulnerable to Command Injection. In the `DocumentMatcher` class, selectors on `$where` clauses are passed to a Function constructor unsanitized. This allows attackers to run arbitrary commands in the system when the function is executed.\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.",
        "severity": "critical",
        "identifiers": [
          {
            "value": "GHSA-5mrr-rgp6-x4gr",
            "type": "GHSA"
          }
        ],
        "references": [
          {
            "url": "https://github.com/bkimminich/juice-shop/issues/1173"
          },
          {
            "url": "https://www.npmjs.com/advisories/1122"
          },
          {
            "url": "https://github.com/advisories/GHSA-5mrr-rgp6-x4gr"
          }
        ],
        "published_at": "2020-09-03T19:39:05Z",
        "updated_at": "2023-01-09T05:03:48Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "marsdb"
            },
            "severity": "critical",
            "vulnerable_version_range": ">= 0.0.0",
            "first_patched_version": null
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": null,
            "score": 0.0
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "cvss": {
          "vector_string": null,
          "score": 0.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-77",
            "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "marsdb"
        },
        "severity": "critical",
        "vulnerable_version_range": ">= 0.0.0",
        "first_patched_version": null
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/5",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/5",
      "created_at": "2025-06-17T09:20:48Z",
      "updated_at": "2025-06-17T09:20:48Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 4,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "express-jwt"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-6g6m-m6h5-w9gf",
        "cve_id": "CVE-2020-15084",
        "summary": "Authorization bypass in express-jwt",
        "description": "### Overview\nVersions before and including 5.3.3, we are not enforcing the **algorithms** entry to be specified in the configuration.\nWhen **algorithms** is not specified in the configuration, with the combination of jwks-rsa, it may lead to authorization bypass. \n\n### Am I affected?\nYou are affected by this vulnerability if all of the following conditions apply:\n\nYou are using express-jwt\nAND \nYou do not have **algorithms**  configured in your express-jwt configuration.\nAND\nYou are using libraries such as jwks-rsa as the **secret**. \n\n### How to fix that?\nSpecify **algorithms** in the express-jwt configuration. The following is an example of a proper configuration\n\n``` \nconst checkJwt = jwt({\n  secret: jwksRsa.expressJwtSecret({\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://${DOMAIN}/.well-known/jwks.json`\n  }),\n  // Validate the audience and the issuer.\n  audience: process.env.AUDIENCE,\n  issuer: `https://${DOMAIN}/`,\n  // restrict allowed algorithms\n  algorithms: ['RS256']\n}); \n```\n\n### Will this update impact my users?\nThe fix provided in patch will not affect your users if you specified the algorithms allowed. The patch now makes **algorithms** a required configuration. \n\n\n### Credit\nIST Group",
        "severity": "high",
        "identifiers": [
          {
            "value": "GHSA-6g6m-m6h5-w9gf",
            "type": "GHSA"
          },
          {
            "value": "CVE-2020-15084",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://github.com/auth0/express-jwt/security/advisories/GHSA-6g6m-m6h5-w9gf"
          },
          {
            "url": "https://github.com/auth0/express-jwt/commit/7ecab5f8f0cab5297c2b863596566eb0c019cdef"
          },
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-15084"
          },
          {
            "url": "https://github.com/advisories/GHSA-6g6m-m6h5-w9gf"
          }
        ],
        "published_at": "2020-06-30T16:05:24Z",
        "updated_at": "2023-02-02T05:04:02Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "express-jwt"
            },
            "severity": "high",
            "vulnerable_version_range": "<= 5.3.3",
            "first_patched_version": {
              "identifier": "6.0.0"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N",
            "score": 7.7
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00064,
          "percentile": 0.20109
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N",
          "score": 7.7
        },
        "cwes": [
          {
            "cwe_id": "CWE-285",
            "name": "Improper Authorization"
          },
          {
            "cwe_id": "CWE-863",
            "name": "Incorrect Authorization"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "express-jwt"
        },
        "severity": "high",
        "vulnerable_version_range": "<= 5.3.3",
        "first_patched_version": {
          "identifier": "6.0.0"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/4",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/4",
      "created_at": "2025-06-17T09:20:48Z",
      "updated_at": "2025-06-17T09:20:48Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 3,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-3j7m-hmh3-9jmp",
        "cve_id": "CVE-2016-1000237",
        "summary": "Cross-Site Scripting in sanitize-html",
        "description": "Affected versions of `sanitize-html` do not sanitize input recursively, which may allow an attacker to execute arbitrary Javascript.\n\n\n## Recommendation\n\nUpdate to version 1.4.3 or later.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-3j7m-hmh3-9jmp",
            "type": "GHSA"
          },
          {
            "value": "CVE-2016-1000237",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2016-1000237"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/issues/29"
          },
          {
            "url": "https://github.com/apostrophecms/sanitize-html/commit/762fbc7bba389f3f789cc291c1eb2b64f60f2caf"
          },
          {
            "url": "https://raw.githubusercontent.com/distributedweaknessfiling/cvelist/master/2016/1000xxx/CVE-2016-1000237.json"
          },
          {
            "url": "https://github.com/punkave/sanitize-html/issues/29"
          },
          {
            "url": "https://www.npmjs.com/advisories/135"
          },
          {
            "url": "https://github.com/advisories/GHSA-3j7m-hmh3-9jmp"
          }
        ],
        "published_at": "2020-04-16T03:14:47Z",
        "updated_at": "2023-01-09T05:02:23Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 1.4.3",
            "first_patched_version": {
              "identifier": "1.4.3"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "score": 6.1
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00328,
          "percentile": 0.54776
        },
        "cvss": {
          "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "score": 6.1
        },
        "cwes": [
          {
            "cwe_id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "< 1.4.3",
        "first_patched_version": {
          "identifier": "1.4.3"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/3",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/3",
      "created_at": "2025-06-17T09:20:48Z",
      "updated_at": "2025-06-17T09:20:48Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 2,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-xc6g-ggrc-qq4r",
        "cve_id": "CVE-2017-16016",
        "summary": "Cross-Site Scripting in sanitize-html",
        "description": "Affected versions of `sanitize-html` are vulnerable to cross-site scripting when allowedTags includes at least one `nonTextTag`.\n\n## Proof of Concept\n\n```js\nvar sanitizeHtml = require('sanitize-html');\n\nvar dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!';\nvar clean = sanitizeHtml(dirty, {\n    allowedTags: [ 'textarea' ]\n});\n\nconsole.log(clean);\n\n// !<textarea></textarea><svg/onload=prompt`xs`></textarea>!\n```\n\n\n## Recommendation\n\nUpdate to version 1.11.4 or later.",
        "severity": "medium",
        "identifiers": [
          {
            "value": "GHSA-xc6g-ggrc-qq4r",
            "type": "GHSA"
          },
          {
            "value": "CVE-2017-16016",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-16016"
          },
          {
            "url": "https://github.com/punkave/sanitize-html/issues/100"
          },
          {
            "url": "https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403)))"
          },
          {
            "url": "https://github.com/advisories/GHSA-xc6g-ggrc-qq4r"
          },
          {
            "url": "https://npmjs.com/package/sanitize-html#discarding-the-entire-contents-of-a-disallowed-tag"
          },
          {
            "url": "https://www.npmjs.com/advisories/154"
          },
          {
            "url": "https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403"
          }
        ],
        "published_at": "2018-11-09T17:47:23Z",
        "updated_at": "2023-09-08T23:04:55Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "sanitize-html"
            },
            "severity": "medium",
            "vulnerable_version_range": "<= 1.11.1",
            "first_patched_version": {
              "identifier": "1.11.4"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": null,
            "score": 0.0
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.00286,
          "percentile": 0.51619
        },
        "cvss": {
          "vector_string": null,
          "score": 0.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "sanitize-html"
        },
        "severity": "medium",
        "vulnerable_version_range": "<= 1.11.1",
        "first_patched_version": {
          "identifier": "1.11.4"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/2",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/2",
      "created_at": "2025-06-17T09:20:48Z",
      "updated_at": "2025-06-17T09:20:48Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    },
    {
      "number": 1,
      "state": "open",
      "dependency": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "manifest_path": "package.json",
        "scope": "runtime",
        "relationship": "direct"
      },
      "security_advisory": {
        "ghsa_id": "GHSA-c7hr-j4mj-j2w6",
        "cve_id": "CVE-2015-9235",
        "summary": "Verification Bypass in jsonwebtoken",
        "description": "Versions 4.2.1 and earlier of `jsonwebtoken` are affected by a verification bypass vulnerability. This is a result of weak validation of the JWT algorithm type, occuring when an attacker is allowed to arbitrarily specify the JWT algorithm.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.2.2 or later.",
        "severity": "critical",
        "identifiers": [
          {
            "value": "GHSA-c7hr-j4mj-j2w6",
            "type": "GHSA"
          },
          {
            "value": "CVE-2015-9235",
            "type": "CVE"
          }
        ],
        "references": [
          {
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2015-9235"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/1bb584bc382295eeb7ee8c4452a673a77a68b687"
          },
          {
            "url": "https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/"
          },
          {
            "url": "https://github.com/advisories/GHSA-c7hr-j4mj-j2w6"
          },
          {
            "url": "https://www.npmjs.com/advisories/17"
          },
          {
            "url": "https://www.timmclean.net/2015/02/25/jwt-alg-none.html"
          }
        ],
        "published_at": "2018-10-09T00:38:30Z",
        "updated_at": "2023-01-09T05:02:50Z",
        "withdrawn_at": null,
        "vulnerabilities": [
          {
            "package": {
              "ecosystem": "npm",
              "name": "jsonwebtoken"
            },
            "severity": "critical",
            "vulnerable_version_range": "< 4.2.2",
            "first_patched_version": {
              "identifier": "4.2.2"
            }
          }
        ],
        "cvss_severities": {
          "cvss_v3": {
            "vector_string": null,
            "score": 0.0
          },
          "cvss_v4": {
            "vector_string": null,
            "score": 0.0
          }
        },
        "epss": {
          "percentage": 0.41149,
          "percentile": 0.97212
        },
        "cvss": {
          "vector_string": null,
          "score": 0.0
        },
        "cwes": [
          {
            "cwe_id": "CWE-20",
            "name": "Improper Input Validation"
          }
        ]
      },
      "security_vulnerability": {
        "package": {
          "ecosystem": "npm",
          "name": "jsonwebtoken"
        },
        "severity": "critical",
        "vulnerable_version_range": "< 4.2.2",
        "first_patched_version": {
          "identifier": "4.2.2"
        }
      },
      "url": "https://api.github.com/repos/Champmsecurity/juice-shop_Ghas/dependabot/alerts/1",
      "html_url": "https://github.com/Champmsecurity/juice-shop_Ghas/security/dependabot/1",
      "created_at": "2025-06-17T09:20:48Z",
      "updated_at": "2025-06-17T09:20:48Z",
      "dismissed_at": null,
      "dismissed_by": null,
      "dismissed_reason": null,
      "dismissed_comment": null,
      "fixed_at": null,
      "auto_dismissed_at": null
    }
  ],
  "zap": {
    "@programName": "ZAP",
    "@version": "2.16.1",
    "@generated": "Thu, 19 Jun 2025 07:42:55",
    "site": [
      {
        "@name": "https://preview.owasp-juice.shop",
        "@host": "preview.owasp-juice.shop",
        "@port": "443",
        "@ssl": "true",
        "alerts": [
          {
            "pluginid": "10038",
            "alertRef": "10038-1",
            "alert": "Content Security Policy (CSP) Header Not Set",
            "name": "Content Security Policy (CSP) Header Not Set",
            "riskcode": "2",
            "confidence": "3",
            "riskdesc": "Medium (High)",
            "desc": "<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>",
            "instances": [
              {
                "id": "1",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "103",
                "uri": "https://preview.owasp-juice.shop/",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "107",
                "uri": "https://preview.owasp-juice.shop/app/build/routes/fileServer.js:59:18",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "85",
                "uri": "https://preview.owasp-juice.shop/ftp",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "75",
                "uri": "https://preview.owasp-juice.shop/ftp/coupons_2013.md.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "80",
                "uri": "https://preview.owasp-juice.shop/ftp/eastere.gg",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "76",
                "uri": "https://preview.owasp-juice.shop/ftp/encrypt.pyc",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "95",
                "uri": "https://preview.owasp-juice.shop/ftp/package-lock.json.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "99",
                "uri": "https://preview.owasp-juice.shop/ftp/package.json.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "100",
                "uri": "https://preview.owasp-juice.shop/ftp/suspicious_errors.yml",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "38",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              }
            ],
            "count": "11",
            "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.</p>",
            "otherinfo": "",
            "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</p><p>https://www.w3.org/TR/CSP/</p><p>https://w3c.github.io/webappsec-csp/</p><p>https://web.dev/articles/csp</p><p>https://caniuse.com/#feat=contentsecuritypolicy</p><p>https://content-security-policy.com/</p>",
            "cweid": "693",
            "wascid": "15",
            "sourceid": "1"
          },
          {
            "pluginid": "10098",
            "alertRef": "10098",
            "alert": "Cross-Domain Misconfiguration",
            "name": "Cross-Domain Misconfiguration",
            "riskcode": "2",
            "confidence": "2",
            "riskdesc": "Medium (Medium)",
            "desc": "<p>Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.</p>",
            "instances": [
              {
                "id": "2",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "15",
                "uri": "https://preview.owasp-juice.shop/assets/public/favicon_js.ico",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "81",
                "uri": "https://preview.owasp-juice.shop/ftp/eastere.gg",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "79",
                "uri": "https://preview.owasp-juice.shop/ftp/encrypt.pyc",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "63",
                "uri": "https://preview.owasp-juice.shop/main.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "31",
                "uri": "https://preview.owasp-juice.shop/polyfills.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "20",
                "uri": "https://preview.owasp-juice.shop/robots.txt",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "23",
                "uri": "https://preview.owasp-juice.shop/runtime.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "39",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "56",
                "uri": "https://preview.owasp-juice.shop/styles.css",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              },
              {
                "id": "69",
                "uri": "https://preview.owasp-juice.shop/vendor.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Access-Control-Allow-Origin: *",
                "otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
              }
            ],
            "count": "11",
            "solution": "<p>Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).</p><p>Configure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.</p>",
            "otherinfo": "<p>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</p>",
            "reference": "<p>https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy</p>",
            "cweid": "264",
            "wascid": "14",
            "sourceid": "1"
          },
          {
            "pluginid": "10017",
            "alertRef": "10017",
            "alert": "Cross-Domain JavaScript Source File Inclusion",
            "name": "Cross-Domain JavaScript Source File Inclusion",
            "riskcode": "1",
            "confidence": "2",
            "riskdesc": "Low (Medium)",
            "desc": "<p>The page includes one or more script files from a third-party domain.</p>",
            "instances": [
              {
                "id": "3",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "4",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "104",
                "uri": "https://preview.owasp-juice.shop/",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "105",
                "uri": "https://preview.owasp-juice.shop/",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "108",
                "uri": "https://preview.owasp-juice.shop/app/build/routes/fileServer.js:59:18",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "109",
                "uri": "https://preview.owasp-juice.shop/app/build/routes/fileServer.js:59:18",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "111",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:365:14",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "112",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:365:14",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "40",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": ""
              },
              {
                "id": "41",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script>",
                "otherinfo": ""
              }
            ],
            "count": "10",
            "solution": "<p>Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.</p>",
            "otherinfo": "",
            "reference": "",
            "cweid": "829",
            "wascid": "15",
            "sourceid": "1"
          },
          {
            "pluginid": "10110",
            "alertRef": "10110",
            "alert": "Dangerous JS Functions",
            "name": "Dangerous JS Functions",
            "riskcode": "1",
            "confidence": "1",
            "riskdesc": "Low (Low)",
            "desc": "<p>A dangerous JS function seems to be in use that would leave the site vulnerable.</p>",
            "instances": [
              {
                "id": "67",
                "uri": "https://preview.owasp-juice.shop/main.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "bypassSecurityTrustHtml(",
                "otherinfo": ""
              },
              {
                "id": "73",
                "uri": "https://preview.owasp-juice.shop/vendor.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "bypassSecurityTrustHtml(",
                "otherinfo": ""
              }
            ],
            "count": "2",
            "solution": "<p>See the references for security advice on the use of these functions.</p>",
            "otherinfo": "",
            "reference": "<p>https://angular.io/guide/security</p>",
            "cweid": "749",
            "wascid": "-1",
            "sourceid": "21"
          },
          {
            "pluginid": "10063",
            "alertRef": "10063-2",
            "alert": "Deprecated Feature Policy Header Set",
            "name": "Deprecated Feature Policy Header Set",
            "riskcode": "1",
            "confidence": "2",
            "riskdesc": "Low (Medium)",
            "desc": "<p>The header has now been renamed to Permissions-Policy.</p>",
            "instances": [
              {
                "id": "12",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              },
              {
                "id": "93",
                "uri": "https://preview.owasp-juice.shop/ftp",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              },
              {
                "id": "89",
                "uri": "https://preview.owasp-juice.shop/ftp/eastere.gg",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              },
              {
                "id": "90",
                "uri": "https://preview.owasp-juice.shop/ftp/encrypt.pyc",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              },
              {
                "id": "68",
                "uri": "https://preview.owasp-juice.shop/main.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              },
              {
                "id": "49",
                "uri": "https://preview.owasp-juice.shop/polyfills.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              },
              {
                "id": "28",
                "uri": "https://preview.owasp-juice.shop/runtime.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              },
              {
                "id": "53",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              },
              {
                "id": "74",
                "uri": "https://preview.owasp-juice.shop/vendor.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Feature-Policy",
                "otherinfo": ""
              }
            ],
            "count": "9",
            "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.</p>",
            "otherinfo": "",
            "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy</p><p>https://scotthelme.co.uk/goodbye-feature-policy-and-hello-permissions-policy/</p>",
            "cweid": "16",
            "wascid": "15",
            "sourceid": "1"
          },
          {
            "pluginid": "90004",
            "alertRef": "90004-2",
            "alert": "Insufficient Site Isolation Against Spectre Vulnerability",
            "name": "Insufficient Site Isolation Against Spectre Vulnerability",
            "riskcode": "1",
            "confidence": "2",
            "riskdesc": "Low (Medium)",
            "desc": "<p>Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).</p>",
            "instances": [
              {
                "id": "13",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "Cross-Origin-Embedder-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "115",
                "uri": "https://preview.owasp-juice.shop/",
                "method": "GET",
                "param": "Cross-Origin-Embedder-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "118",
                "uri": "https://preview.owasp-juice.shop/app/build/routes/fileServer.js:59:18",
                "method": "GET",
                "param": "Cross-Origin-Embedder-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "94",
                "uri": "https://preview.owasp-juice.shop/ftp",
                "method": "GET",
                "param": "Cross-Origin-Embedder-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "54",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "Cross-Origin-Embedder-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "14",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "Cross-Origin-Opener-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "116",
                "uri": "https://preview.owasp-juice.shop/",
                "method": "GET",
                "param": "Cross-Origin-Opener-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "119",
                "uri": "https://preview.owasp-juice.shop/app/build/routes/fileServer.js:59:18",
                "method": "GET",
                "param": "Cross-Origin-Opener-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "96",
                "uri": "https://preview.owasp-juice.shop/ftp",
                "method": "GET",
                "param": "Cross-Origin-Opener-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "55",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "Cross-Origin-Opener-Policy",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              }
            ],
            "count": "10",
            "solution": "<p>Ensure that the application/web server sets the Cross-Origin-Embedder-Policy header appropriately, and that it sets the Cross-Origin-Embedder-Policy header to 'require-corp' for documents.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Embedder-Policy header (https://caniuse.com/mdn-http_headers_cross-origin-embedder-policy).</p>",
            "otherinfo": "",
            "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy</p>",
            "cweid": "693",
            "wascid": "14",
            "sourceid": "1"
          },
          {
            "pluginid": "10063",
            "alertRef": "10063-1",
            "alert": "Permissions Policy Header Not Set",
            "name": "Permissions Policy Header Not Set",
            "riskcode": "1",
            "confidence": "2",
            "riskdesc": "Low (Medium)",
            "desc": "<p>Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.</p>",
            "instances": [
              {
                "id": "87",
                "uri": "https://preview.owasp-juice.shop/ftp/coupons_2013.md.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "98",
                "uri": "https://preview.owasp-juice.shop/ftp/package-lock.json.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              }
            ],
            "count": "2",
            "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.</p>",
            "otherinfo": "",
            "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy</p><p>https://developer.chrome.com/blog/feature-policy/</p><p>https://scotthelme.co.uk/a-new-security-header-feature-policy/</p><p>https://w3c.github.io/webappsec-feature-policy/</p><p>https://www.smashingmagazine.com/2018/12/feature-policy/</p>",
            "cweid": "693",
            "wascid": "15",
            "sourceid": "37"
          },
          {
            "pluginid": "10036",
            "alertRef": "10036",
            "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "riskcode": "1",
            "confidence": "3",
            "riskdesc": "Low (High)",
            "desc": "<p>The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.</p>",
            "instances": [
              {
                "id": "78",
                "uri": "https://preview.owasp-juice.shop/ftp/coupons_2013.md.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Apache/2.4.63 (Unix)",
                "otherinfo": ""
              },
              {
                "id": "97",
                "uri": "https://preview.owasp-juice.shop/ftp/package-lock.json.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Apache/2.4.63 (Unix)",
                "otherinfo": ""
              },
              {
                "id": "101",
                "uri": "https://preview.owasp-juice.shop/ftp/package.json.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Apache/2.4.63 (Unix)",
                "otherinfo": ""
              }
            ],
            "count": "3",
            "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.</p>",
            "otherinfo": "",
            "reference": "<p>https://httpd.apache.org/docs/current/mod/core.html#servertokens</p><p>https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)</p><p>https://www.troyhunt.com/shhh-dont-let-your-response-headers/</p>",
            "cweid": "497",
            "wascid": "13",
            "sourceid": "37"
          },
          {
            "pluginid": "10035",
            "alertRef": "10035-1",
            "alert": "Strict-Transport-Security Header Not Set",
            "name": "Strict-Transport-Security Header Not Set",
            "riskcode": "1",
            "confidence": "3",
            "riskdesc": "Low (High)",
            "desc": "<p>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.</p>",
            "instances": [
              {
                "id": "6",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "16",
                "uri": "https://preview.owasp-juice.shop/assets/public/favicon_js.ico",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "82",
                "uri": "https://preview.owasp-juice.shop/ftp/coupons_2013.md.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "84",
                "uri": "https://preview.owasp-juice.shop/ftp/eastere.gg",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "86",
                "uri": "https://preview.owasp-juice.shop/ftp/encrypt.pyc",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "65",
                "uri": "https://preview.owasp-juice.shop/main.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "36",
                "uri": "https://preview.owasp-juice.shop/polyfills.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "21",
                "uri": "https://preview.owasp-juice.shop/robots.txt",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "25",
                "uri": "https://preview.owasp-juice.shop/runtime.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "51",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "61",
                "uri": "https://preview.owasp-juice.shop/styles.css",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "71",
                "uri": "https://preview.owasp-juice.shop/vendor.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              }
            ],
            "count": "12",
            "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.</p>",
            "otherinfo": "",
            "reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html</p><p>https://owasp.org/www-community/Security_Headers</p><p>https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security</p><p>https://caniuse.com/stricttransportsecurity</p><p>https://datatracker.ietf.org/doc/html/rfc6797</p>",
            "cweid": "319",
            "wascid": "15",
            "sourceid": "1"
          },
          {
            "pluginid": "10096",
            "alertRef": "10096",
            "alert": "Timestamp Disclosure - Unix",
            "name": "Timestamp Disclosure - Unix",
            "riskcode": "1",
            "confidence": "1",
            "riskdesc": "Low (Low)",
            "desc": "<p>A timestamp was disclosed by the application/web server. - Unix</p>",
            "instances": [
              {
                "id": "8",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "1650485437",
                "otherinfo": "1650485437, which evaluates to: 2022-04-20 20:10:37."
              },
              {
                "id": "10",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "1981395349",
                "otherinfo": "1981395349, which evaluates to: 2032-10-14 19:35:49."
              },
              {
                "id": "9",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "2038834951",
                "otherinfo": "2038834951, which evaluates to: 2034-08-10 15:02:31."
              },
              {
                "id": "7",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "Reporting-Endpoints",
                "attack": "",
                "evidence": "1750318953",
                "otherinfo": "1750318953, which evaluates to: 2025-06-19 07:42:33."
              },
              {
                "id": "45",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "Reporting-Endpoints",
                "attack": "",
                "evidence": "1750318954",
                "otherinfo": "1750318954, which evaluates to: 2025-06-19 07:42:34."
              },
              {
                "id": "17",
                "uri": "https://preview.owasp-juice.shop/assets/public/favicon_js.ico",
                "method": "GET",
                "param": "Reporting-Endpoints",
                "attack": "",
                "evidence": "1750318954",
                "otherinfo": "1750318954, which evaluates to: 2025-06-19 07:42:34."
              },
              {
                "id": "37",
                "uri": "https://preview.owasp-juice.shop/polyfills.js",
                "method": "GET",
                "param": "Reporting-Endpoints",
                "attack": "",
                "evidence": "1750318955",
                "otherinfo": "1750318955, which evaluates to: 2025-06-19 07:42:35."
              },
              {
                "id": "22",
                "uri": "https://preview.owasp-juice.shop/robots.txt",
                "method": "GET",
                "param": "Reporting-Endpoints",
                "attack": "",
                "evidence": "1750318954",
                "otherinfo": "1750318954, which evaluates to: 2025-06-19 07:42:34."
              },
              {
                "id": "26",
                "uri": "https://preview.owasp-juice.shop/runtime.js",
                "method": "GET",
                "param": "Reporting-Endpoints",
                "attack": "",
                "evidence": "1750318955",
                "otherinfo": "1750318955, which evaluates to: 2025-06-19 07:42:35."
              }
            ],
            "count": "9",
            "solution": "<p>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.</p>",
            "otherinfo": "<p>1650485437, which evaluates to: 2022-04-20 20:10:37.</p>",
            "reference": "<p>https://cwe.mitre.org/data/definitions/200.html</p>",
            "cweid": "497",
            "wascid": "13",
            "sourceid": "1"
          },
          {
            "pluginid": "10027",
            "alertRef": "10027",
            "alert": "Information Disclosure - Suspicious Comments",
            "name": "Information Disclosure - Suspicious Comments",
            "riskcode": "0",
            "confidence": "1",
            "riskdesc": "Informational (Low)",
            "desc": "<p>The response appears to contain suspicious comments which may help an attacker.</p>",
            "instances": [
              {
                "id": "64",
                "uri": "https://preview.owasp-juice.shop/main.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "query",
                "otherinfo": "The following pattern was used: \\bQUERY\\b and was detected in likely comment: \"//owasp.org' target='_blank'>Open Worldwide Application Security Project (OWASP)</a> and is developed and maintained by voluntee\", see evidence field for the suspicious comment/snippet."
              },
              {
                "id": "70",
                "uri": "https://preview.owasp-juice.shop/vendor.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "Query",
                "otherinfo": "The following pattern was used: \\bQUERY\\b and was detected in likely comment: \"//www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M0 256C0 397.4 114.6 512 256 512s256-114.6 256-256S397.4 0 256 0S0 114.6 0\", see evidence field for the suspicious comment/snippet."
              }
            ],
            "count": "2",
            "solution": "<p>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.</p>",
            "otherinfo": "<p>The following pattern was used: \\bQUERY\\b and was detected in likely comment: \"//owasp.org' target='_blank'>Open Worldwide Application Security Project (OWASP)</a> and is developed and maintained by voluntee\", see evidence field for the suspicious comment/snippet.</p>",
            "reference": "",
            "cweid": "615",
            "wascid": "13",
            "sourceid": "21"
          },
          {
            "pluginid": "10109",
            "alertRef": "10109",
            "alert": "Modern Web Application",
            "name": "Modern Web Application",
            "riskcode": "0",
            "confidence": "2",
            "riskdesc": "Informational (Medium)",
            "desc": "<p>The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.</p>",
            "instances": [
              {
                "id": "5",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "113",
                "uri": "https://preview.owasp-juice.shop/",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "123",
                "uri": "https://preview.owasp-juice.shop/app/build/routes/fileServer.js:43:13",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "114",
                "uri": "https://preview.owasp-juice.shop/app/build/routes/fileServer.js:59:18",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "127",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:280:10",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "126",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:286:9",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "122",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:328:13",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "117",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:365:14",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "125",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:421:3",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "124",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/layer.js:95:5",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              },
              {
                "id": "50",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js\"></script>",
                "otherinfo": "No links have been found while there are scripts, which is an indication that this is a modern web application."
              }
            ],
            "count": "11",
            "solution": "<p>This is an informational alert and so no changes are required.</p>",
            "otherinfo": "<p>No links have been found while there are scripts, which is an indication that this is a modern web application.</p>",
            "reference": "",
            "cweid": "-1",
            "wascid": "-1",
            "sourceid": "1"
          },
          {
            "pluginid": "10049",
            "alertRef": "10049",
            "alert": "Non-Storable Content",
            "name": "Non-Storable Content",
            "riskcode": "0",
            "confidence": "2",
            "riskdesc": "Informational (Medium)",
            "desc": "<p>The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.</p>",
            "instances": [
              {
                "id": "83",
                "uri": "https://preview.owasp-juice.shop/ftp/coupons_2013.md.bak",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "403",
                "otherinfo": ""
              },
              {
                "id": "88",
                "uri": "https://preview.owasp-juice.shop/ftp/eastere.gg",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "403",
                "otherinfo": ""
              }
            ],
            "count": "2",
            "solution": "<p>The content may be marked as storable by ensuring that the following conditions are satisfied:</p><p>The request method must be understood by the cache and defined as being cacheable (\"GET\", \"HEAD\", and \"POST\" are currently defined as cacheable)</p><p>The response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)</p><p>The \"no-store\" cache directive must not appear in the request or response header fields</p><p>For caching by \"shared\" caches such as \"proxy\" caches, the \"private\" response directive must not appear in the response</p><p>For caching by \"shared\" caches such as \"proxy\" caches, the \"Authorization\" header field must not appear in the request, unless the response explicitly allows it (using one of the \"must-revalidate\", \"public\", or \"s-maxage\" Cache-Control response directives)</p><p>In addition to the conditions above, at least one of the following conditions must also be satisfied by the response:</p><p>It must contain an \"Expires\" header field</p><p>It must contain a \"max-age\" response directive</p><p>For \"shared\" caches such as \"proxy\" caches, it must contain a \"s-maxage\" response directive</p><p>It must contain a \"Cache Control Extension\" that allows it to be cached</p><p>It must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).</p>",
            "otherinfo": "",
            "reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
            "cweid": "524",
            "wascid": "13",
            "sourceid": "37"
          },
          {
            "pluginid": "10015",
            "alertRef": "10015",
            "alert": "Re-examine Cache-control Directives",
            "name": "Re-examine Cache-control Directives",
            "riskcode": "0",
            "confidence": "1",
            "riskdesc": "Informational (Low)",
            "desc": "<p>The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.</p>",
            "instances": [
              {
                "id": "0",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              },
              {
                "id": "102",
                "uri": "https://preview.owasp-juice.shop/",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              },
              {
                "id": "106",
                "uri": "https://preview.owasp-juice.shop/app/build/routes/fileServer.js:59:18",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              },
              {
                "id": "121",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:328:13",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              },
              {
                "id": "110",
                "uri": "https://preview.owasp-juice.shop/app/node_modules/express/lib/router/index.js:365:14",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              },
              {
                "id": "77",
                "uri": "https://preview.owasp-juice.shop/ftp",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "91",
                "uri": "https://preview.owasp-juice.shop/ftp/acquisitions.md",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              },
              {
                "id": "120",
                "uri": "https://preview.owasp-juice.shop/ftp/announcement_encrypted.md",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              },
              {
                "id": "92",
                "uri": "https://preview.owasp-juice.shop/ftp/legal.md",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              },
              {
                "id": "19",
                "uri": "https://preview.owasp-juice.shop/robots.txt",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "",
                "otherinfo": ""
              },
              {
                "id": "35",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "cache-control",
                "attack": "",
                "evidence": "public, max-age=0",
                "otherinfo": ""
              }
            ],
            "count": "11",
            "solution": "<p>For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".</p>",
            "otherinfo": "",
            "reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching</p><p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control</p><p>https://grayduck.mn/2021/09/13/cache-control-recommendations/</p>",
            "cweid": "525",
            "wascid": "13",
            "sourceid": "1"
          },
          {
            "pluginid": "10049",
            "alertRef": "10049",
            "alert": "Storable and Cacheable Content",
            "name": "Storable and Cacheable Content",
            "riskcode": "0",
            "confidence": "2",
            "riskdesc": "Informational (Medium)",
            "desc": "<p>The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.</p>",
            "instances": [
              {
                "id": "24",
                "uri": "https://preview.owasp-juice.shop/robots.txt",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "",
                "otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
              }
            ],
            "count": "1",
            "solution": "<p>Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:</p><p>Cache-Control: no-cache, no-store, must-revalidate, private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.</p>",
            "otherinfo": "<p>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.</p>",
            "reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
            "cweid": "524",
            "wascid": "13",
            "sourceid": "13"
          },
          {
            "pluginid": "10049",
            "alertRef": "10049",
            "alert": "Storable but Non-Cacheable Content",
            "name": "Storable but Non-Cacheable Content",
            "riskcode": "0",
            "confidence": "2",
            "riskdesc": "Informational (Medium)",
            "desc": "<p>The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users.</p>",
            "instances": [
              {
                "id": "11",
                "uri": "https://preview.owasp-juice.shop",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "max-age=0",
                "otherinfo": ""
              },
              {
                "id": "18",
                "uri": "https://preview.owasp-juice.shop/assets/public/favicon_js.ico",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "max-age=0",
                "otherinfo": ""
              },
              {
                "id": "66",
                "uri": "https://preview.owasp-juice.shop/main.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "max-age=0",
                "otherinfo": ""
              },
              {
                "id": "42",
                "uri": "https://preview.owasp-juice.shop/polyfills.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "max-age=0",
                "otherinfo": ""
              },
              {
                "id": "27",
                "uri": "https://preview.owasp-juice.shop/runtime.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "max-age=0",
                "otherinfo": ""
              },
              {
                "id": "52",
                "uri": "https://preview.owasp-juice.shop/sitemap.xml",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "max-age=0",
                "otherinfo": ""
              },
              {
                "id": "62",
                "uri": "https://preview.owasp-juice.shop/styles.css",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "max-age=0",
                "otherinfo": ""
              },
              {
                "id": "72",
                "uri": "https://preview.owasp-juice.shop/vendor.js",
                "method": "GET",
                "param": "",
                "attack": "",
                "evidence": "max-age=0",
                "otherinfo": ""
              }
            ],
            "count": "8",
            "solution": "",
            "otherinfo": "",
            "reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
            "cweid": "524",
            "wascid": "13",
            "sourceid": "1"
          }
        ]
      }
    ],
    "sequences": []
  }
}
